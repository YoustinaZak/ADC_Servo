
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000437c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004520  08004520  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004520  08004520  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  2000007c  080045a4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080045a4  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009802  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0c  00000000  00000000  000298ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002b4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a1  00000000  00000000  0002c040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000187e5  00000000  00000000  0002c8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d338  00000000  00000000  000450c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d432  00000000  00000000  000523fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003500  00000000  00000000  000df830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000035  00000000  00000000  000e2d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004474 	.word	0x08004474

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08004474 	.word	0x08004474

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2iz>:
 8000e58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30f      	bcc.n	8000e82 <__aeabi_f2iz+0x2a>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d90d      	bls.n	8000e88 <__aeabi_f2iz+0x30>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e78:	fa23 f002 	lsr.w	r0, r3, r2
 8000e7c:	bf18      	it	ne
 8000e7e:	4240      	negne	r0, r0
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr
 8000e88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_f2iz+0x3a>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d105      	bne.n	8000e9e <__aeabi_f2iz+0x46>
 8000e92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e96:	bf08      	it	eq
 8000e98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f04f 0000 	mov.w	r0, #0
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_f2uiz>:
 8000ea4:	0042      	lsls	r2, r0, #1
 8000ea6:	d20e      	bcs.n	8000ec6 <__aeabi_f2uiz+0x22>
 8000ea8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eac:	d30b      	bcc.n	8000ec6 <__aeabi_f2uiz+0x22>
 8000eae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eb6:	d409      	bmi.n	8000ecc <__aeabi_f2uiz+0x28>
 8000eb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec4:	4770      	bx	lr
 8000ec6:	f04f 0000 	mov.w	r0, #0
 8000eca:	4770      	bx	lr
 8000ecc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_f2uiz+0x32>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d102      	bne.n	8000edc <__aeabi_f2uiz+0x38>
 8000ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eda:	4770      	bx	lr
 8000edc:	f04f 0000 	mov.w	r0, #0
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	0000      	movs	r0, r0
	...

08000ee8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eee:	f000 fd55 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ef2:	f000 f88b 	bl	800100c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ef6:	f000 f97d 	bl	80011f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000efa:	f000 f8e3 	bl	80010c4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000efe:	f000 f91f 	bl	8001140 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Alcd_Init(&LCD_Display, 2, 0);     //start display
 8000f02:	2200      	movs	r2, #0
 8000f04:	2102      	movs	r1, #2
 8000f06:	4838      	ldr	r0, [pc, #224]	; (8000fe8 <main+0x100>)
 8000f08:	f000 fc20 	bl	800174c <Alcd_Init>
  Alcd_PutAt_n(&LCD_Display, 0, 0, "Init", 4);
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <main+0x104>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	4834      	ldr	r0, [pc, #208]	; (8000fe8 <main+0x100>)
 8000f18:	f000 fcd3 	bl	80018c2 <Alcd_PutAt_n>
  HAL_Delay(1000);
 8000f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f20:	f000 fd9e 	bl	8001a60 <HAL_Delay>

  HAL_ADC_Start(&hadc1);      //channel 7 A7
 8000f24:	4832      	ldr	r0, [pc, #200]	; (8000ff0 <main+0x108>)
 8000f26:	f000 fe97 	bl	8001c58 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4831      	ldr	r0, [pc, #196]	; (8000ff4 <main+0x10c>)
 8000f2e:	f002 fa1f 	bl	8003370 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000f32:	2164      	movs	r1, #100	; 0x64
 8000f34:	482e      	ldr	r0, [pc, #184]	; (8000ff0 <main+0x108>)
 8000f36:	f000 ff3d 	bl	8001db4 <HAL_ADC_PollForConversion>
	  uint32_t result=HAL_ADC_GetValue(&hadc1);
 8000f3a:	482d      	ldr	r0, [pc, #180]	; (8000ff0 <main+0x108>)
 8000f3c:	f001 f840 	bl	8001fc0 <HAL_ADC_GetValue>
 8000f40:	60f8      	str	r0, [r7, #12]
	  float degrees = (result/4095.0)* 180;
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff fa4e 	bl	80003e4 <__aeabi_ui2d>
 8000f48:	a325      	add	r3, pc, #148	; (adr r3, 8000fe0 <main+0xf8>)
 8000f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f4e:	f7ff fbed 	bl	800072c <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <main+0x110>)
 8000f60:	f7ff faba 	bl	80004d8 <__aeabi_dmul>
 8000f64:	4602      	mov	r2, r0
 8000f66:	460b      	mov	r3, r1
 8000f68:	4610      	mov	r0, r2
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f7ff fcc6 	bl	80008fc <__aeabi_d2f>
 8000f70:	4603      	mov	r3, r0
 8000f72:	60bb      	str	r3, [r7, #8]
	  uint32_t pwm_val = degrees_to_pwm(degrees);
 8000f74:	68b8      	ldr	r0, [r7, #8]
 8000f76:	f000 f95f 	bl	8001238 <degrees_to_pwm>
 8000f7a:	6078      	str	r0, [r7, #4]

      HAL_Delay(500);
 8000f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f80:	f000 fd6e 	bl	8001a60 <HAL_Delay>
	  sprintf(degree_str,"%d degree",(int)degrees);
 8000f84:	68b8      	ldr	r0, [r7, #8]
 8000f86:	f7ff ff67 	bl	8000e58 <__aeabi_f2iz>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	491b      	ldr	r1, [pc, #108]	; (8000ffc <main+0x114>)
 8000f90:	481b      	ldr	r0, [pc, #108]	; (8001000 <main+0x118>)
 8000f92:	f002 fdbd 	bl	8003b10 <siprintf>
	  Alcd_PutAt_n(&LCD_Display, 0, 0, degree_str, strlen(degree_str));
 8000f96:	481a      	ldr	r0, [pc, #104]	; (8001000 <main+0x118>)
 8000f98:	f7ff f8da 	bl	8000150 <strlen>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <main+0x118>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	480f      	ldr	r0, [pc, #60]	; (8000fe8 <main+0x100>)
 8000faa:	f000 fc8a 	bl	80018c2 <Alcd_PutAt_n>
	  sprintf(count_str,"%d count",result);
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4914      	ldr	r1, [pc, #80]	; (8001004 <main+0x11c>)
 8000fb2:	4815      	ldr	r0, [pc, #84]	; (8001008 <main+0x120>)
 8000fb4:	f002 fdac 	bl	8003b10 <siprintf>
	  Alcd_PutAt_n(&LCD_Display, 1, 0, count_str, strlen(count_str));
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <main+0x120>)
 8000fba:	f7ff f8c9 	bl	8000150 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <main+0x120>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <main+0x100>)
 8000fcc:	f000 fc79 	bl	80018c2 <Alcd_PutAt_n>
	  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pwm_val);
 8000fd0:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <main+0x10c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000fd8:	e7ab      	b.n	8000f32 <main+0x4a>
 8000fda:	bf00      	nop
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	40affe00 	.word	0x40affe00
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	0800448c 	.word	0x0800448c
 8000ff0:	20000098 	.word	0x20000098
 8000ff4:	200000c8 	.word	0x200000c8
 8000ff8:	40668000 	.word	0x40668000
 8000ffc:	08004494 	.word	0x08004494
 8001000:	20000110 	.word	0x20000110
 8001004:	080044a0 	.word	0x080044a0
 8001008:	20000124 	.word	0x20000124

0800100c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b094      	sub	sp, #80	; 0x50
 8001010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f002 fd98 	bl	8003b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103c:	2301      	movs	r3, #1
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104a:	2301      	movs	r3, #1
 800104c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001058:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001062:	4618      	mov	r0, r3
 8001064:	f001 fbcc 	bl	8002800 <HAL_RCC_OscConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800106e:	f000 f905 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800107e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001082:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2102      	movs	r1, #2
 800108e:	4618      	mov	r0, r3
 8001090:	f001 fe38 	bl	8002d04 <HAL_RCC_ClockConfig>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800109a:	f000 f8ef 	bl	800127c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800109e:	2302      	movs	r3, #2
 80010a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80010a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010a6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 ffa4 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010b6:	f000 f8e1 	bl	800127c <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	; 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_ADC1_Init+0x74>)
 80010d6:	4a19      	ldr	r2, [pc, #100]	; (800113c <MX_ADC1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_ADC1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_ADC1_Init+0x74>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010e6:	4b14      	ldr	r3, [pc, #80]	; (8001138 <MX_ADC1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_ADC1_Init+0x74>)
 80010ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <MX_ADC1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010fa:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_ADC1_Init+0x74>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001100:	480d      	ldr	r0, [pc, #52]	; (8001138 <MX_ADC1_Init+0x74>)
 8001102:	f000 fcd1 	bl	8001aa8 <HAL_ADC_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800110c:	f000 f8b6 	bl	800127c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001110:	2307      	movs	r3, #7
 8001112:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001114:	2301      	movs	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_ADC1_Init+0x74>)
 8001122:	f000 ff59 	bl	8001fd8 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800112c:	f000 f8a6 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000098 	.word	0x20000098
 800113c:	40012400 	.word	0x40012400

08001140 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
 800115e:	615a      	str	r2, [r3, #20]
 8001160:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001162:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MX_TIM3_Init+0xac>)
 8001164:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <MX_TIM3_Init+0xb0>)
 8001166:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001168:	4b20      	ldr	r3, [pc, #128]	; (80011ec <MX_TIM3_Init+0xac>)
 800116a:	2247      	movs	r2, #71	; 0x47
 800116c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <MX_TIM3_Init+0xac>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001174:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_TIM3_Init+0xac>)
 8001176:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800117a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_TIM3_Init+0xac>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM3_Init+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001188:	4818      	ldr	r0, [pc, #96]	; (80011ec <MX_TIM3_Init+0xac>)
 800118a:	f002 f8a1 	bl	80032d0 <HAL_TIM_PWM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001194:	f000 f872 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4619      	mov	r1, r3
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_TIM3_Init+0xac>)
 80011a8:	f002 fc54 	bl	8003a54 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80011b2:	f000 f863 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	; 0x60
 80011b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM3_Init+0xac>)
 80011ce:	f002 f971 	bl	80034b4 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80011d8:	f000 f850 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM3_Init+0xac>)
 80011de:	f000 f8df 	bl	80013a0 <HAL_TIM_MspPostInit>

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000c8 	.word	0x200000c8
 80011f0:	40000400 	.word	0x40000400

080011f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_GPIO_Init+0x40>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a0d      	ldr	r2, [pc, #52]	; (8001234 <MX_GPIO_Init+0x40>)
 8001200:	f043 0320 	orr.w	r3, r3, #32
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b0b      	ldr	r3, [pc, #44]	; (8001234 <MX_GPIO_Init+0x40>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0320 	and.w	r3, r3, #32
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <MX_GPIO_Init+0x40>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	4a07      	ldr	r2, [pc, #28]	; (8001234 <MX_GPIO_Init+0x40>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6193      	str	r3, [r2, #24]
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <MX_GPIO_Init+0x40>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000

08001238 <degrees_to_pwm>:

/* USER CODE BEGIN 4 */
uint32_t degrees_to_pwm(float val){  //search
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

	return ((val *1000)/180)+999 ;
 8001240:	490b      	ldr	r1, [pc, #44]	; (8001270 <degrees_to_pwm+0x38>)
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fcb8 	bl	8000bb8 <__aeabi_fmul>
 8001248:	4603      	mov	r3, r0
 800124a:	490a      	ldr	r1, [pc, #40]	; (8001274 <degrees_to_pwm+0x3c>)
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd67 	bl	8000d20 <__aeabi_fdiv>
 8001252:	4603      	mov	r3, r0
 8001254:	4908      	ldr	r1, [pc, #32]	; (8001278 <degrees_to_pwm+0x40>)
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fba6 	bl	80009a8 <__addsf3>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe20 	bl	8000ea4 <__aeabi_f2uiz>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	447a0000 	.word	0x447a0000
 8001274:	43340000 	.word	0x43340000
 8001278:	4479c000 	.word	0x4479c000

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <HAL_MspInit+0x5c>)
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <HAL_MspInit+0x5c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6193      	str	r3, [r2, #24]
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_MspInit+0x5c>)
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_MspInit+0x5c>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <HAL_MspInit+0x5c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	61d3      	str	r3, [r2, #28]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_MspInit+0x5c>)
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_MspInit+0x60>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_MspInit+0x60>)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010000 	.word	0x40010000

080012ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <HAL_ADC_MspInit+0x6c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d121      	bne.n	8001350 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <HAL_ADC_MspInit+0x70>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a12      	ldr	r2, [pc, #72]	; (800135c <HAL_ADC_MspInit+0x70>)
 8001312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_ADC_MspInit+0x70>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_ADC_MspInit+0x70>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	4a0c      	ldr	r2, [pc, #48]	; (800135c <HAL_ADC_MspInit+0x70>)
 800132a:	f043 0304 	orr.w	r3, r3, #4
 800132e:	6193      	str	r3, [r2, #24]
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_ADC_MspInit+0x70>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001340:	2303      	movs	r3, #3
 8001342:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <HAL_ADC_MspInit+0x74>)
 800134c:	f001 f8bc 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40012400 	.word	0x40012400
 800135c:	40021000 	.word	0x40021000
 8001360:	40010800 	.word	0x40010800

08001364 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_TIM_PWM_MspInit+0x34>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d10b      	bne.n	800138e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_TIM_PWM_MspInit+0x38>)
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_TIM_PWM_MspInit+0x38>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	61d3      	str	r3, [r2, #28]
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_TIM_PWM_MspInit+0x38>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	40000400 	.word	0x40000400
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b088      	sub	sp, #32
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <HAL_TIM_MspPostInit+0x58>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d117      	bne.n	80013f0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <HAL_TIM_MspPostInit+0x5c>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <HAL_TIM_MspPostInit+0x5c>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <HAL_TIM_MspPostInit+0x5c>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2302      	movs	r3, #2
 80013e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4619      	mov	r1, r3
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <HAL_TIM_MspPostInit+0x60>)
 80013ec:	f001 f86c 	bl	80024c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40000400 	.word	0x40000400
 80013fc:	40021000 	.word	0x40021000
 8001400:	40010800 	.word	0x40010800

08001404 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <NMI_Handler+0x4>

0800140a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler+0x4>

08001416 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <UsageFault_Handler+0x4>

08001422 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	bc80      	pop	{r7}
 8001444:	4770      	bx	lr

08001446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 faed 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <_sbrk+0x5c>)
 800145e:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <_sbrk+0x60>)
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <_sbrk+0x64>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d102      	bne.n	8001476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <_sbrk+0x64>)
 8001472:	4a12      	ldr	r2, [pc, #72]	; (80014bc <_sbrk+0x68>)
 8001474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <_sbrk+0x64>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	d207      	bcs.n	8001494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001484:	f002 fb6c 	bl	8003b60 <__errno>
 8001488:	4603      	mov	r3, r0
 800148a:	220c      	movs	r2, #12
 800148c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
 8001492:	e009      	b.n	80014a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149a:	4b07      	ldr	r3, [pc, #28]	; (80014b8 <_sbrk+0x64>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <_sbrk+0x64>)
 80014a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014a6:	68fb      	ldr	r3, [r7, #12]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20005000 	.word	0x20005000
 80014b4:	00000400 	.word	0x00000400
 80014b8:	20000138 	.word	0x20000138
 80014bc:	20000288 	.word	0x20000288

080014c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014cc:	f7ff fff8 	bl	80014c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014d2:	490c      	ldr	r1, [pc, #48]	; (8001504 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014e8:	4c09      	ldr	r4, [pc, #36]	; (8001510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014f6:	f002 fb39 	bl	8003b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014fa:	f7ff fcf5 	bl	8000ee8 <main>
  bx lr
 80014fe:	4770      	bx	lr
  ldr r0, =_sdata
 8001500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001504:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001508:	08004528 	.word	0x08004528
  ldr r2, =_sbss
 800150c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001510:	20000288 	.word	0x20000288

08001514 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001514:	e7fe      	b.n	8001514 <ADC1_2_IRQHandler>
	...

08001518 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <DWT_Delay_Init+0x58>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <DWT_Delay_Init+0x58>)
 8001522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001526:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <DWT_Delay_Init+0x58>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4a10      	ldr	r2, [pc, #64]	; (8001570 <DWT_Delay_Init+0x58>)
 800152e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001532:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <DWT_Delay_Init+0x5c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <DWT_Delay_Init+0x5c>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <DWT_Delay_Init+0x5c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <DWT_Delay_Init+0x5c>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <DWT_Delay_Init+0x5c>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001552:	bf00      	nop
     __ASM volatile ("NOP");
 8001554:	bf00      	nop
  __ASM volatile ("NOP");
 8001556:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <DWT_Delay_Init+0x5c>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001560:	2300      	movs	r3, #0
 8001562:	e000      	b.n	8001566 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001564:	2301      	movs	r3, #1
  }
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000edf0 	.word	0xe000edf0
 8001574:	e0001000 	.word	0xe0001000

08001578 <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <DWT_Delay_us+0x40>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001586:	f001 fcfb 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 800158a:	4603      	mov	r3, r0
 800158c:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <DWT_Delay_us+0x44>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 800159c:	bf00      	nop
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <DWT_Delay_us+0x40>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d3f8      	bcc.n	800159e <DWT_Delay_us+0x26>
		;
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e0001000 	.word	0xe0001000
 80015bc:	431bde83 	.word	0x431bde83

080015c0 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ffd3 	bl	8001578 <DWT_Delay_us>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7a1b      	ldrb	r3, [r3, #8]
 80015f0:	4619      	mov	r1, r3
 80015f2:	230f      	movs	r3, #15
 80015f4:	408b      	lsls	r3, r1
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	400a      	ands	r2, r1
 8001600:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	7a09      	ldrb	r1, [r1, #8]
 800160e:	408b      	lsls	r3, r1
 8001610:	4619      	mov	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	430a      	orrs	r2, r1
 8001618:	60da      	str	r2, [r3, #12]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6958      	ldr	r0, [r3, #20]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	8b1b      	ldrh	r3, [r3, #24]
 8001638:	78fa      	ldrb	r2, [r7, #3]
 800163a:	4619      	mov	r1, r3
 800163c:	f001 f8c8 	bl	80027d0 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	460b      	mov	r3, r1
 8001652:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68d8      	ldr	r0, [r3, #12]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	8a1b      	ldrh	r3, [r3, #16]
 800165c:	78fa      	ldrb	r2, [r7, #3]
 800165e:	4619      	mov	r1, r3
 8001660:	f001 f8b6 	bl	80027d0 <HAL_GPIO_WritePin>
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 8001674:	f107 0308 	add.w	r3, r7, #8
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	2301      	movs	r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	2302      	movs	r3, #2
 800168e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f107 0208 	add.w	r2, r7, #8
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f000 ff14 	bl	80024c8 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	8a1b      	ldrh	r3, [r3, #16]
 80016a4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 ff09 	bl	80024c8 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7a1b      	ldrb	r3, [r3, #8]
 80016ba:	461a      	mov	r2, r3
 80016bc:	230f      	movs	r3, #15
 80016be:	4093      	lsls	r3, r2
 80016c0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f107 0208 	add.w	r2, r7, #8
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fefb 	bl	80024c8 <HAL_GPIO_Init>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
 80016e6:	4613      	mov	r3, r2
 80016e8:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f7ff ff98 	bl	8001624 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 80016f4:	78bb      	ldrb	r3, [r7, #2]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff6c 	bl	80015da <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8001702:	2101      	movs	r1, #1
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff9f 	bl	8001648 <EN_SET>
 800170a:	200a      	movs	r0, #10
 800170c:	f7ff ff58 	bl	80015c0 <usDelay>
 8001710:	2100      	movs	r1, #0
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ff98 	bl	8001648 <EN_SET>
 8001718:	2064      	movs	r0, #100	; 0x64
 800171a:	f7ff ff51 	bl	80015c0 <usDelay>
	;
	Write_HalfByte(lcd, value);
 800171e:	78bb      	ldrb	r3, [r7, #2]
 8001720:	4619      	mov	r1, r3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff ff59 	bl	80015da <Write_HalfByte>
	PulseEn
 8001728:	2101      	movs	r1, #1
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ff8c 	bl	8001648 <EN_SET>
 8001730:	200a      	movs	r0, #10
 8001732:	f7ff ff45 	bl	80015c0 <usDelay>
 8001736:	2100      	movs	r1, #0
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff85 	bl	8001648 <EN_SET>
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f7ff ff3e 	bl	80015c0 <usDelay>
	;
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
 8001758:	4613      	mov	r3, r2
 800175a:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 800175c:	f7ff fedc 	bl	8001518 <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff83 	bl	800166c <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2240      	movs	r2, #64	; 0x40
 8001770:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	78ba      	ldrb	r2, [r7, #2]
 8001776:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	3340      	adds	r3, #64	; 0x40
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8001782:	2100      	movs	r1, #0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff4d 	bl	8001624 <RS_SET>
	EN_SET(lcd, 0);
 800178a:	2100      	movs	r1, #0
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff5b 	bl	8001648 <EN_SET>
	usDelay(50000);
 8001792:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001796:	f7ff ff13 	bl	80015c0 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]
 800179e:	e018      	b.n	80017d2 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 80017a0:	2103      	movs	r1, #3
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ff19 	bl	80015da <Write_HalfByte>
		PulseEn
 80017a8:	2101      	movs	r1, #1
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ff4c 	bl	8001648 <EN_SET>
 80017b0:	200a      	movs	r0, #10
 80017b2:	f7ff ff05 	bl	80015c0 <usDelay>
 80017b6:	2100      	movs	r1, #0
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ff45 	bl	8001648 <EN_SET>
 80017be:	2064      	movs	r0, #100	; 0x64
 80017c0:	f7ff fefe 	bl	80015c0 <usDelay>
		;
		usDelay(4500);
 80017c4:	f241 1094 	movw	r0, #4500	; 0x1194
 80017c8:	f7ff fefa 	bl	80015c0 <usDelay>
	for (x = 0; x < 2; x++)
 80017cc:	7bfb      	ldrb	r3, [r7, #15]
 80017ce:	3301      	adds	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d9e3      	bls.n	80017a0 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 80017d8:	2103      	movs	r1, #3
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff fefd 	bl	80015da <Write_HalfByte>
	PulseEn
 80017e0:	2101      	movs	r1, #1
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff ff30 	bl	8001648 <EN_SET>
 80017e8:	200a      	movs	r0, #10
 80017ea:	f7ff fee9 	bl	80015c0 <usDelay>
 80017ee:	2100      	movs	r1, #0
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff ff29 	bl	8001648 <EN_SET>
 80017f6:	2064      	movs	r0, #100	; 0x64
 80017f8:	f7ff fee2 	bl	80015c0 <usDelay>
	;
	usDelay(150);
 80017fc:	2096      	movs	r0, #150	; 0x96
 80017fe:	f7ff fedf 	bl	80015c0 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8001802:	2102      	movs	r1, #2
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f7ff fee8 	bl	80015da <Write_HalfByte>
	PulseEn
 800180a:	2101      	movs	r1, #1
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff1b 	bl	8001648 <EN_SET>
 8001812:	200a      	movs	r0, #10
 8001814:	f7ff fed4 	bl	80015c0 <usDelay>
 8001818:	2100      	movs	r1, #0
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff ff14 	bl	8001648 <EN_SET>
 8001820:	2064      	movs	r0, #100	; 0x64
 8001822:	f7ff fecd 	bl	80015c0 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 8001826:	2228      	movs	r2, #40	; 0x28
 8001828:	2100      	movs	r1, #0
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ff55 	bl	80016da <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 8001830:	2300      	movs	r3, #0
 8001832:	2200      	movs	r2, #0
 8001834:	2101      	movs	r1, #1
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f86d 	bl	8001916 <Alcd_Display_Control>
	Alcd_Clear(lcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 f859 	bl	80018f4 <Alcd_Clear>
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	460b      	mov	r3, r1
 8001854:	70fb      	strb	r3, [r7, #3]
 8001856:	4613      	mov	r3, r2
 8001858:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	7e9a      	ldrb	r2, [r3, #26]
 8001862:	78bb      	ldrb	r3, [r7, #2]
 8001864:	4413      	add	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	b25b      	sxtb	r3, r3
 800186a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800186e:	b25b      	sxtb	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ff2f 	bl	80016da <Alcd_SendByte>
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	4613      	mov	r3, r2
 8001890:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
 8001896:	e00b      	b.n	80018b0 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	60ba      	str	r2, [r7, #8]
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	2101      	movs	r1, #1
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f7ff ff18 	bl	80016da <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 80018aa:	7dfb      	ldrb	r3, [r7, #23]
 80018ac:	3301      	adds	r3, #1
 80018ae:	75fb      	strb	r3, [r7, #23]
 80018b0:	7dfa      	ldrb	r2, [r7, #23]
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d3ef      	bcc.n	8001898 <Alcd_Put_n+0x14>
	}
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	60f8      	str	r0, [r7, #12]
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	72fb      	strb	r3, [r7, #11]
 80018d0:	4613      	mov	r3, r2
 80018d2:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 80018d4:	7aba      	ldrb	r2, [r7, #10]
 80018d6:	7afb      	ldrb	r3, [r7, #11]
 80018d8:	4619      	mov	r1, r3
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff ffb5 	bl	800184a <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 80018e0:	7e3b      	ldrb	r3, [r7, #24]
 80018e2:	461a      	mov	r2, r3
 80018e4:	6879      	ldr	r1, [r7, #4]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f7ff ffcc 	bl	8001884 <Alcd_Put_n>
}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2100      	movs	r1, #0
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff feea 	bl	80016da <Alcd_SendByte>
	usDelay(2000);
 8001906:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800190a:	f7ff fe59 	bl	80015c0 <usDelay>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	4608      	mov	r0, r1
 8001920:	4611      	mov	r1, r2
 8001922:	461a      	mov	r2, r3
 8001924:	4603      	mov	r3, r0
 8001926:	70fb      	strb	r3, [r7, #3]
 8001928:	460b      	mov	r3, r1
 800192a:	70bb      	strb	r3, [r7, #2]
 800192c:	4613      	mov	r3, r2
 800192e:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7f9b      	ldrb	r3, [r3, #30]
 8001940:	f043 0304 	orr.w	r3, r3, #4
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 800194a:	78bb      	ldrb	r3, [r7, #2]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d006      	beq.n	800195e <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7f9b      	ldrb	r3, [r3, #30]
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	b2da      	uxtb	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7f9b      	ldrb	r3, [r3, #30]
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7f9b      	ldrb	r3, [r3, #30]
 8001976:	f043 0304 	orr.w	r3, r3, #4
 800197a:	b2da      	uxtb	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	7f9b      	ldrb	r3, [r3, #30]
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	b2db      	uxtb	r3, r3
 800198a:	461a      	mov	r2, r3
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fea3 	bl	80016da <Alcd_SendByte>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_Init+0x28>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_Init+0x28>)
 80019a6:	f043 0310 	orr.w	r3, r3, #16
 80019aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 fd57 	bl	8002460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fc66 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40022000 	.word	0x40022000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fd61 	bl	80024ae <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 fd37 	bl	8002476 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000020 	.word	0x20000020
 8001a20:	20000028 	.word	0x20000028
 8001a24:	20000024 	.word	0x20000024

08001a28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <HAL_IncTick+0x1c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_IncTick+0x20>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_IncTick+0x20>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	20000028 	.word	0x20000028
 8001a48:	2000013c 	.word	0x2000013c

08001a4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_GetTick+0x10>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	2000013c 	.word	0x2000013c

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff fff0 	bl	8001a4c <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffe0 	bl	8001a4c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000028 	.word	0x20000028

08001aa8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e0be      	b.n	8001c48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fc00 	bl	80012ec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 fbc5 	bl	800227c <ADC_ConversionStop_Disable>
 8001af2:	4603      	mov	r3, r0
 8001af4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f040 8099 	bne.w	8001c36 <HAL_ADC_Init+0x18e>
 8001b04:	7dfb      	ldrb	r3, [r7, #23]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f040 8095 	bne.w	8001c36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b14:	f023 0302 	bic.w	r3, r3, #2
 8001b18:	f043 0202 	orr.w	r2, r3, #2
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7b1b      	ldrb	r3, [r3, #12]
 8001b2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_Init+0xa2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_ADC_Init+0xa8>
 8001b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_Init+0xaa>
 8001b50:	2300      	movs	r3, #0
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7d1b      	ldrb	r3, [r3, #20]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d119      	bne.n	8001b94 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7b1b      	ldrb	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	035a      	lsls	r2, r3, #13
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e00b      	b.n	8001b94 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_ADC_Init+0x1a8>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc4:	d003      	beq.n	8001bce <HAL_ADC_Init+0x126>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d104      	bne.n	8001bd8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_ADC_Init+0x1ac>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f023 0303 	bic.w	r3, r3, #3
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c12:	e018      	b.n	8001c46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f023 0312 	bic.w	r3, r3, #18
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c34:	e007      	b.n	8001c46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	ffe1f7fd 	.word	0xffe1f7fd
 8001c54:	ff1f0efe 	.word	0xff1f0efe

08001c58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_Start+0x1a>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e098      	b.n	8001da4 <HAL_ADC_Start+0x14c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 faa4 	bl	80021c8 <ADC_Enable>
 8001c80:	4603      	mov	r3, r0
 8001c82:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f040 8087 	bne.w	8001d9a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a41      	ldr	r2, [pc, #260]	; (8001dac <HAL_ADC_Start+0x154>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d105      	bne.n	8001cb6 <HAL_ADC_Start+0x5e>
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d115      	bne.n	8001ce2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d026      	beq.n	8001d1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cd8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ce0:	e01d      	b.n	8001d1e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2f      	ldr	r2, [pc, #188]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d004      	beq.n	8001d02 <HAL_ADC_Start+0xaa>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <HAL_ADC_Start+0x154>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d10d      	bne.n	8001d1e <HAL_ADC_Start+0xc6>
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d006      	beq.n	8001d38 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f023 0206 	bic.w	r2, r3, #6
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d36:	e002      	b.n	8001d3e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f06f 0202 	mvn.w	r2, #2
 8001d4e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d5e:	d113      	bne.n	8001d88 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_ADC_Start+0x154>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d105      	bne.n	8001d76 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	e00c      	b.n	8001da2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	e003      	b.n	8001da2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40012800 	.word	0x40012800
 8001db0:	40012400 	.word	0x40012400

08001db4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001db4:	b590      	push	{r4, r7, lr}
 8001db6:	b087      	sub	sp, #28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001dca:	f7ff fe3f 	bl	8001a4c <HAL_GetTick>
 8001dce:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de2:	f043 0220 	orr.w	r2, r3, #32
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e0d3      	b.n	8001f9e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d131      	bne.n	8001e68 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d12a      	bne.n	8001e68 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e12:	e021      	b.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e1a:	d01d      	beq.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_PollForConversion+0x7e>
 8001e22:	f7ff fe13 	bl	8001a4c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d212      	bcs.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f043 0204 	orr.w	r2, r3, #4
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e0a2      	b.n	8001f9e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0d6      	beq.n	8001e14 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001e66:	e070      	b.n	8001f4a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_ADC_PollForConversion+0x1f4>)
 8001e6a:	681c      	ldr	r4, [r3, #0]
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f001 f979 	bl	8003164 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e72:	4603      	mov	r3, r0
 8001e74:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6919      	ldr	r1, [r3, #16]
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <HAL_ADC_PollForConversion+0x1f8>)
 8001e80:	400b      	ands	r3, r1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x104>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68d9      	ldr	r1, [r3, #12]
 8001e8c:	4b48      	ldr	r3, [pc, #288]	; (8001fb0 <HAL_ADC_PollForConversion+0x1fc>)
 8001e8e:	400b      	ands	r3, r1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d111      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x104>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6919      	ldr	r1, [r3, #16]
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_ADC_PollForConversion+0x200>)
 8001e9c:	400b      	ands	r3, r1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d108      	bne.n	8001eb4 <HAL_ADC_PollForConversion+0x100>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68d9      	ldr	r1, [r3, #12]
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <HAL_ADC_PollForConversion+0x204>)
 8001eaa:	400b      	ands	r3, r1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_PollForConversion+0x100>
 8001eb0:	2314      	movs	r3, #20
 8001eb2:	e020      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x142>
 8001eb4:	2329      	movs	r3, #41	; 0x29
 8001eb6:	e01e      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x142>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6919      	ldr	r1, [r3, #16]
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_ADC_PollForConversion+0x200>)
 8001ec0:	400b      	ands	r3, r1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_ADC_PollForConversion+0x120>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_ADC_PollForConversion+0x204>)
 8001ece:	400b      	ands	r3, r1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_ADC_PollForConversion+0x13c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6919      	ldr	r1, [r3, #16]
 8001eda:	4b38      	ldr	r3, [pc, #224]	; (8001fbc <HAL_ADC_PollForConversion+0x208>)
 8001edc:	400b      	ands	r3, r1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d108      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x140>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68d9      	ldr	r1, [r3, #12]
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <HAL_ADC_PollForConversion+0x208>)
 8001eea:	400b      	ands	r3, r1
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_PollForConversion+0x140>
 8001ef0:	2354      	movs	r3, #84	; 0x54
 8001ef2:	e000      	b.n	8001ef6 <HAL_ADC_PollForConversion+0x142>
 8001ef4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ef6:	fb02 f303 	mul.w	r3, r2, r3
 8001efa:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001efc:	e021      	b.n	8001f42 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f04:	d01a      	beq.n	8001f3c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_ADC_PollForConversion+0x168>
 8001f0c:	f7ff fd9e 	bl	8001a4c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d20f      	bcs.n	8001f3c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d90b      	bls.n	8001f3c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	f043 0204 	orr.w	r2, r3, #4
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e030      	b.n	8001f9e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d8d9      	bhi.n	8001efe <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0212 	mvn.w	r2, #18
 8001f52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f6a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f6e:	d115      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d111      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d105      	bne.n	8001f9c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f043 0201 	orr.w	r2, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000020 	.word	0x20000020
 8001fac:	24924924 	.word	0x24924924
 8001fb0:	00924924 	.word	0x00924924
 8001fb4:	12492492 	.word	0x12492492
 8001fb8:	00492492 	.word	0x00492492
 8001fbc:	00249249 	.word	0x00249249

08001fc0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x20>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e0dc      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x1da>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b06      	cmp	r3, #6
 8002006:	d81c      	bhi.n	8002042 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	3b05      	subs	r3, #5
 800201a:	221f      	movs	r2, #31
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	4019      	ands	r1, r3
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b05      	subs	r3, #5
 8002034:	fa00 f203 	lsl.w	r2, r0, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	635a      	str	r2, [r3, #52]	; 0x34
 8002040:	e03c      	b.n	80020bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b0c      	cmp	r3, #12
 8002048:	d81c      	bhi.n	8002084 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	3b23      	subs	r3, #35	; 0x23
 800205c:	221f      	movs	r2, #31
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	4019      	ands	r1, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	3b23      	subs	r3, #35	; 0x23
 8002076:	fa00 f203 	lsl.w	r2, r0, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
 8002082:	e01b      	b.n	80020bc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3b41      	subs	r3, #65	; 0x41
 8002096:	221f      	movs	r2, #31
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	4019      	ands	r1, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b41      	subs	r3, #65	; 0x41
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b09      	cmp	r3, #9
 80020c2:	d91c      	bls.n	80020fe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68d9      	ldr	r1, [r3, #12]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	3b1e      	subs	r3, #30
 80020d6:	2207      	movs	r2, #7
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	4019      	ands	r1, r3
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6898      	ldr	r0, [r3, #8]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	3b1e      	subs	r3, #30
 80020f0:	fa00 f203 	lsl.w	r2, r0, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	60da      	str	r2, [r3, #12]
 80020fc:	e019      	b.n	8002132 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6919      	ldr	r1, [r3, #16]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4613      	mov	r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4413      	add	r3, r2
 800210e:	2207      	movs	r2, #7
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	4019      	ands	r1, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6898      	ldr	r0, [r3, #8]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4613      	mov	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	fa00 f203 	lsl.w	r2, r0, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d003      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800213e:	2b11      	cmp	r3, #17
 8002140:	d132      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_ADC_ConfigChannel+0x1e4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d125      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d126      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002168:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b10      	cmp	r3, #16
 8002170:	d11a      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	0c9a      	lsrs	r2, r3, #18
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002188:	e002      	b.n	8002190 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	3b01      	subs	r3, #1
 800218e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f9      	bne.n	800218a <HAL_ADC_ConfigChannel+0x1b2>
 8002196:	e007      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f043 0220 	orr.w	r2, r3, #32
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012400 	.word	0x40012400
 80021c0:	20000020 	.word	0x20000020
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d040      	beq.n	8002268 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0201 	orr.w	r2, r2, #1
 80021f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <ADC_Enable+0xac>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a1f      	ldr	r2, [pc, #124]	; (8002278 <ADC_Enable+0xb0>)
 80021fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002204:	e002      	b.n	800220c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	3b01      	subs	r3, #1
 800220a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1f9      	bne.n	8002206 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002212:	f7ff fc1b 	bl	8001a4c <HAL_GetTick>
 8002216:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002218:	e01f      	b.n	800225a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800221a:	f7ff fc17 	bl	8001a4c <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d918      	bls.n	800225a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d011      	beq.n	800225a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	f043 0210 	orr.w	r2, r3, #16
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e007      	b.n	800226a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b01      	cmp	r3, #1
 8002266:	d1d8      	bne.n	800221a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000020 	.word	0x20000020
 8002278:	431bde83 	.word	0x431bde83

0800227c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d12e      	bne.n	80022f4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0201 	bic.w	r2, r2, #1
 80022a4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022a6:	f7ff fbd1 	bl	8001a4c <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022ac:	e01b      	b.n	80022e6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80022ae:	f7ff fbcd 	bl	8001a4c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d914      	bls.n	80022e6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10d      	bne.n	80022e6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ce:	f043 0210 	orr.w	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	f043 0201 	orr.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e007      	b.n	80022f6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d0dc      	beq.n	80022ae <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800231c:	4013      	ands	r3, r2
 800231e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800232c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <__NVIC_SetPriorityGrouping+0x44>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <__NVIC_GetPriorityGrouping+0x18>)
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	f003 0307 	and.w	r3, r3, #7
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	2b00      	cmp	r3, #0
 8002376:	db0a      	blt.n	800238e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	490c      	ldr	r1, [pc, #48]	; (80023b0 <__NVIC_SetPriority+0x4c>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	440b      	add	r3, r1
 8002388:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800238c:	e00a      	b.n	80023a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4908      	ldr	r1, [pc, #32]	; (80023b4 <__NVIC_SetPriority+0x50>)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	3b04      	subs	r3, #4
 800239c:	0112      	lsls	r2, r2, #4
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	440b      	add	r3, r1
 80023a2:	761a      	strb	r2, [r3, #24]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	f1c3 0307 	rsb	r3, r3, #7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	bf28      	it	cs
 80023d6:	2304      	movcs	r3, #4
 80023d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3304      	adds	r3, #4
 80023de:	2b06      	cmp	r3, #6
 80023e0:	d902      	bls.n	80023e8 <NVIC_EncodePriority+0x30>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3b03      	subs	r3, #3
 80023e6:	e000      	b.n	80023ea <NVIC_EncodePriority+0x32>
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	f04f 32ff 	mov.w	r2, #4294967295
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	401a      	ands	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002400:	f04f 31ff 	mov.w	r1, #4294967295
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa01 f303 	lsl.w	r3, r1, r3
 800240a:	43d9      	mvns	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002410:	4313      	orrs	r3, r2
         );
}
 8002412:	4618      	mov	r0, r3
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800242c:	d301      	bcc.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e00f      	b.n	8002452 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4a0a      	ldr	r2, [pc, #40]	; (800245c <SysTick_Config+0x40>)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	210f      	movs	r1, #15
 800243c:	f04f 30ff 	mov.w	r0, #4294967295
 8002440:	f7ff ff90 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <SysTick_Config+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <SysTick_Config+0x40>)
 800244c:	2207      	movs	r2, #7
 800244e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	e000e010 	.word	0xe000e010

08002460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff ff49 	bl	8002300 <__NVIC_SetPriorityGrouping>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	4603      	mov	r3, r0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002488:	f7ff ff5e 	bl	8002348 <__NVIC_GetPriorityGrouping>
 800248c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	68b9      	ldr	r1, [r7, #8]
 8002492:	6978      	ldr	r0, [r7, #20]
 8002494:	f7ff ff90 	bl	80023b8 <NVIC_EncodePriority>
 8002498:	4602      	mov	r2, r0
 800249a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff ff5f 	bl	8002364 <__NVIC_SetPriority>
}
 80024a6:	bf00      	nop
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff ffb0 	bl	800241c <SysTick_Config>
 80024bc:	4603      	mov	r3, r0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b08b      	sub	sp, #44	; 0x2c
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80024d6:	2300      	movs	r3, #0
 80024d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	e169      	b.n	80027b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80024dc:	2201      	movs	r2, #1
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8158 	bne.w	80027aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a9a      	ldr	r2, [pc, #616]	; (8002768 <HAL_GPIO_Init+0x2a0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d05e      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002504:	4a98      	ldr	r2, [pc, #608]	; (8002768 <HAL_GPIO_Init+0x2a0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d875      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 800250a:	4a98      	ldr	r2, [pc, #608]	; (800276c <HAL_GPIO_Init+0x2a4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d058      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002510:	4a96      	ldr	r2, [pc, #600]	; (800276c <HAL_GPIO_Init+0x2a4>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d86f      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 8002516:	4a96      	ldr	r2, [pc, #600]	; (8002770 <HAL_GPIO_Init+0x2a8>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d052      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 800251c:	4a94      	ldr	r2, [pc, #592]	; (8002770 <HAL_GPIO_Init+0x2a8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d869      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 8002522:	4a94      	ldr	r2, [pc, #592]	; (8002774 <HAL_GPIO_Init+0x2ac>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d04c      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002528:	4a92      	ldr	r2, [pc, #584]	; (8002774 <HAL_GPIO_Init+0x2ac>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d863      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 800252e:	4a92      	ldr	r2, [pc, #584]	; (8002778 <HAL_GPIO_Init+0x2b0>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d046      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
 8002534:	4a90      	ldr	r2, [pc, #576]	; (8002778 <HAL_GPIO_Init+0x2b0>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d85d      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 800253a:	2b12      	cmp	r3, #18
 800253c:	d82a      	bhi.n	8002594 <HAL_GPIO_Init+0xcc>
 800253e:	2b12      	cmp	r3, #18
 8002540:	d859      	bhi.n	80025f6 <HAL_GPIO_Init+0x12e>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <HAL_GPIO_Init+0x80>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	080025c3 	.word	0x080025c3
 800254c:	0800259d 	.word	0x0800259d
 8002550:	080025af 	.word	0x080025af
 8002554:	080025f1 	.word	0x080025f1
 8002558:	080025f7 	.word	0x080025f7
 800255c:	080025f7 	.word	0x080025f7
 8002560:	080025f7 	.word	0x080025f7
 8002564:	080025f7 	.word	0x080025f7
 8002568:	080025f7 	.word	0x080025f7
 800256c:	080025f7 	.word	0x080025f7
 8002570:	080025f7 	.word	0x080025f7
 8002574:	080025f7 	.word	0x080025f7
 8002578:	080025f7 	.word	0x080025f7
 800257c:	080025f7 	.word	0x080025f7
 8002580:	080025f7 	.word	0x080025f7
 8002584:	080025f7 	.word	0x080025f7
 8002588:	080025f7 	.word	0x080025f7
 800258c:	080025a5 	.word	0x080025a5
 8002590:	080025b9 	.word	0x080025b9
 8002594:	4a79      	ldr	r2, [pc, #484]	; (800277c <HAL_GPIO_Init+0x2b4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800259a:	e02c      	b.n	80025f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	623b      	str	r3, [r7, #32]
          break;
 80025a2:	e029      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	3304      	adds	r3, #4
 80025aa:	623b      	str	r3, [r7, #32]
          break;
 80025ac:	e024      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	3308      	adds	r3, #8
 80025b4:	623b      	str	r3, [r7, #32]
          break;
 80025b6:	e01f      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	330c      	adds	r3, #12
 80025be:	623b      	str	r3, [r7, #32]
          break;
 80025c0:	e01a      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d102      	bne.n	80025d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80025ca:	2304      	movs	r3, #4
 80025cc:	623b      	str	r3, [r7, #32]
          break;
 80025ce:	e013      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025d8:	2308      	movs	r3, #8
 80025da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	611a      	str	r2, [r3, #16]
          break;
 80025e2:	e009      	b.n	80025f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80025e4:	2308      	movs	r3, #8
 80025e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	615a      	str	r2, [r3, #20]
          break;
 80025ee:	e003      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80025f0:	2300      	movs	r3, #0
 80025f2:	623b      	str	r3, [r7, #32]
          break;
 80025f4:	e000      	b.n	80025f8 <HAL_GPIO_Init+0x130>
          break;
 80025f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2bff      	cmp	r3, #255	; 0xff
 80025fc:	d801      	bhi.n	8002602 <HAL_GPIO_Init+0x13a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	e001      	b.n	8002606 <HAL_GPIO_Init+0x13e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3304      	adds	r3, #4
 8002606:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d802      	bhi.n	8002614 <HAL_GPIO_Init+0x14c>
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	e002      	b.n	800261a <HAL_GPIO_Init+0x152>
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	3b08      	subs	r3, #8
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	210f      	movs	r1, #15
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	fa01 f303 	lsl.w	r3, r1, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	6a39      	ldr	r1, [r7, #32]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	fa01 f303 	lsl.w	r3, r1, r3
 8002634:	431a      	orrs	r2, r3
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 80b1 	beq.w	80027aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_GPIO_Init+0x2b8>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <HAL_GPIO_Init+0x2b8>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6193      	str	r3, [r2, #24]
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_GPIO_Init+0x2b8>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002660:	4a48      	ldr	r2, [pc, #288]	; (8002784 <HAL_GPIO_Init+0x2bc>)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a40      	ldr	r2, [pc, #256]	; (8002788 <HAL_GPIO_Init+0x2c0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <HAL_GPIO_Init+0x1ec>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a3f      	ldr	r2, [pc, #252]	; (800278c <HAL_GPIO_Init+0x2c4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00d      	beq.n	80026b0 <HAL_GPIO_Init+0x1e8>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <HAL_GPIO_Init+0x2c8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d007      	beq.n	80026ac <HAL_GPIO_Init+0x1e4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a3d      	ldr	r2, [pc, #244]	; (8002794 <HAL_GPIO_Init+0x2cc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_GPIO_Init+0x1e0>
 80026a4:	2303      	movs	r3, #3
 80026a6:	e006      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026a8:	2304      	movs	r3, #4
 80026aa:	e004      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e002      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <HAL_GPIO_Init+0x1ee>
 80026b4:	2300      	movs	r3, #0
 80026b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	4093      	lsls	r3, r2
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026c6:	492f      	ldr	r1, [pc, #188]	; (8002784 <HAL_GPIO_Init+0x2bc>)
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3302      	adds	r3, #2
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d006      	beq.n	80026ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	492c      	ldr	r1, [pc, #176]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	608b      	str	r3, [r1, #8]
 80026ec:	e006      	b.n	80026fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	4928      	ldr	r1, [pc, #160]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4922      	ldr	r1, [pc, #136]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
 8002714:	e006      	b.n	8002724 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	43db      	mvns	r3, r3
 800271e:	491e      	ldr	r1, [pc, #120]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002720:	4013      	ands	r3, r2
 8002722:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d006      	beq.n	800273e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4918      	ldr	r1, [pc, #96]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800273e:	4b16      	ldr	r3, [pc, #88]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	43db      	mvns	r3, r3
 8002746:	4914      	ldr	r1, [pc, #80]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 8002748:	4013      	ands	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d021      	beq.n	800279c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	490e      	ldr	r1, [pc, #56]	; (8002798 <HAL_GPIO_Init+0x2d0>)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
 8002764:	e021      	b.n	80027aa <HAL_GPIO_Init+0x2e2>
 8002766:	bf00      	nop
 8002768:	10320000 	.word	0x10320000
 800276c:	10310000 	.word	0x10310000
 8002770:	10220000 	.word	0x10220000
 8002774:	10210000 	.word	0x10210000
 8002778:	10120000 	.word	0x10120000
 800277c:	10110000 	.word	0x10110000
 8002780:	40021000 	.word	0x40021000
 8002784:	40010000 	.word	0x40010000
 8002788:	40010800 	.word	0x40010800
 800278c:	40010c00 	.word	0x40010c00
 8002790:	40011000 	.word	0x40011000
 8002794:	40011400 	.word	0x40011400
 8002798:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_GPIO_Init+0x304>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	4909      	ldr	r1, [pc, #36]	; (80027cc <HAL_GPIO_Init+0x304>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3301      	adds	r3, #1
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f47f ae8e 	bne.w	80024dc <HAL_GPIO_Init+0x14>
  }
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	372c      	adds	r7, #44	; 0x2c
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	40010400 	.word	0x40010400

080027d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	460b      	mov	r3, r1
 80027da:	807b      	strh	r3, [r7, #2]
 80027dc:	4613      	mov	r3, r2
 80027de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027e0:	787b      	ldrb	r3, [r7, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027e6:	887a      	ldrh	r2, [r7, #2]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80027ec:	e003      	b.n	80027f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80027ee:	887b      	ldrh	r3, [r7, #2]
 80027f0:	041a      	lsls	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	611a      	str	r2, [r3, #16]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e272      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8087 	beq.w	800292e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b04      	cmp	r3, #4
 800282a:	d00c      	beq.n	8002846 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800282c:	4b8f      	ldr	r3, [pc, #572]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b08      	cmp	r3, #8
 8002836:	d112      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
 8002838:	4b8c      	ldr	r3, [pc, #560]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002844:	d10b      	bne.n	800285e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002846:	4b89      	ldr	r3, [pc, #548]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d06c      	beq.n	800292c <HAL_RCC_OscConfig+0x12c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d168      	bne.n	800292c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e24c      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002866:	d106      	bne.n	8002876 <HAL_RCC_OscConfig+0x76>
 8002868:	4b80      	ldr	r3, [pc, #512]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7f      	ldr	r2, [pc, #508]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	e02e      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_RCC_OscConfig+0x98>
 800287e:	4b7b      	ldr	r3, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a7a      	ldr	r2, [pc, #488]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b78      	ldr	r3, [pc, #480]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a77      	ldr	r2, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e01d      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0xbc>
 80028a2:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a71      	ldr	r2, [pc, #452]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ac:	6013      	str	r3, [r2, #0]
 80028ae:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0xd4>
 80028bc:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a6a      	ldr	r2, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c6:	6013      	str	r3, [r2, #0]
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a67      	ldr	r2, [pc, #412]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff f8b6 	bl	8001a4c <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e4:	f7ff f8b2 	bl	8001a4c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b64      	cmp	r3, #100	; 0x64
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e200      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b5d      	ldr	r3, [pc, #372]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0xe4>
 8002902:	e014      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002904:	f7ff f8a2 	bl	8001a4c <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800290c:	f7ff f89e 	bl	8001a4c <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b64      	cmp	r3, #100	; 0x64
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e1ec      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f0      	bne.n	800290c <HAL_RCC_OscConfig+0x10c>
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800292c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d063      	beq.n	8002a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800293a:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00b      	beq.n	800295e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002946:	4b49      	ldr	r3, [pc, #292]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 030c 	and.w	r3, r3, #12
 800294e:	2b08      	cmp	r3, #8
 8002950:	d11c      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
 8002952:	4b46      	ldr	r3, [pc, #280]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d116      	bne.n	800298c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e1c0      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4939      	ldr	r1, [pc, #228]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800298a:	e03a      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002994:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 8002996:	2201      	movs	r2, #1
 8002998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299a:	f7ff f857 	bl	8001a4c <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029a2:	f7ff f853 	bl	8001a4c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1a1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	4927      	ldr	r1, [pc, #156]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	600b      	str	r3, [r1, #0]
 80029d4:	e015      	b.n	8002a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_RCC_OscConfig+0x270>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff f836 	bl	8001a4c <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029e4:	f7ff f832 	bl	8001a4c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e180      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d03a      	beq.n	8002a84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d019      	beq.n	8002a4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a18:	2201      	movs	r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7ff f816 	bl	8001a4c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a24:	f7ff f812 	bl	8001a4c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e160      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <HAL_RCC_OscConfig+0x26c>)
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a42:	2001      	movs	r0, #1
 8002a44:	f000 faba 	bl	8002fbc <RCC_Delay>
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a50:	f7fe fffc 	bl	8001a4c <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a56:	e00f      	b.n	8002a78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a58:	f7fe fff8 	bl	8001a4c <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d908      	bls.n	8002a78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e146      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	42420000 	.word	0x42420000
 8002a74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b92      	ldr	r3, [pc, #584]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e9      	bne.n	8002a58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a6 	beq.w	8002bde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b8b      	ldr	r3, [pc, #556]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	4b88      	ldr	r3, [pc, #544]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aac:	61d3      	str	r3, [r2, #28]
 8002aae:	4b85      	ldr	r3, [pc, #532]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aba:	2301      	movs	r3, #1
 8002abc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abe:	4b82      	ldr	r3, [pc, #520]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d118      	bne.n	8002afc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4b7f      	ldr	r3, [pc, #508]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a7e      	ldr	r2, [pc, #504]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe ffb9 	bl	8001a4c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ade:	f7fe ffb5 	bl	8001a4c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b64      	cmp	r3, #100	; 0x64
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e103      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	4b75      	ldr	r3, [pc, #468]	; (8002cc8 <HAL_RCC_OscConfig+0x4c8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d106      	bne.n	8002b12 <HAL_RCC_OscConfig+0x312>
 8002b04:	4b6f      	ldr	r3, [pc, #444]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a6e      	ldr	r2, [pc, #440]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	f043 0301 	orr.w	r3, r3, #1
 8002b0e:	6213      	str	r3, [r2, #32]
 8002b10:	e02d      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x334>
 8002b1a:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	f023 0301 	bic.w	r3, r3, #1
 8002b24:	6213      	str	r3, [r2, #32]
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a66      	ldr	r2, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	f023 0304 	bic.w	r3, r3, #4
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	e01c      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCC_OscConfig+0x356>
 8002b3c:	4b61      	ldr	r3, [pc, #388]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4a60      	ldr	r2, [pc, #384]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	6213      	str	r3, [r2, #32]
 8002b48:	4b5e      	ldr	r3, [pc, #376]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4a5d      	ldr	r2, [pc, #372]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6213      	str	r3, [r2, #32]
 8002b54:	e00b      	b.n	8002b6e <HAL_RCC_OscConfig+0x36e>
 8002b56:	4b5b      	ldr	r3, [pc, #364]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	f023 0301 	bic.w	r3, r3, #1
 8002b60:	6213      	str	r3, [r2, #32]
 8002b62:	4b58      	ldr	r3, [pc, #352]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b68:	f023 0304 	bic.w	r3, r3, #4
 8002b6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d015      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b76:	f7fe ff69 	bl	8001a4c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7e:	f7fe ff65 	bl	8001a4c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e0b1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b94:	4b4b      	ldr	r3, [pc, #300]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0ee      	beq.n	8002b7e <HAL_RCC_OscConfig+0x37e>
 8002ba0:	e014      	b.n	8002bcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba2:	f7fe ff53 	bl	8001a4c <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe ff4f 	bl	8001a4c <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e09b      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc0:	4b40      	ldr	r3, [pc, #256]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ee      	bne.n	8002baa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d105      	bne.n	8002bde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bd2:	4b3c      	ldr	r3, [pc, #240]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8087 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be8:	4b36      	ldr	r3, [pc, #216]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 030c 	and.w	r3, r3, #12
 8002bf0:	2b08      	cmp	r3, #8
 8002bf2:	d061      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d146      	bne.n	8002c8a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c02:	f7fe ff23 	bl	8001a4c <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0a:	f7fe ff1f 	bl	8001a4c <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e06d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	4b29      	ldr	r3, [pc, #164]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f0      	bne.n	8002c0a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c32:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	4921      	ldr	r1, [pc, #132]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a19      	ldr	r1, [r3, #32]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	430b      	orrs	r3, r1
 8002c56:	491b      	ldr	r1, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fef3 	bl	8001a4c <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c68:	e008      	b.n	8002c7c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6a:	f7fe feef 	bl	8001a4c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e03d      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0f0      	beq.n	8002c6a <HAL_RCC_OscConfig+0x46a>
 8002c88:	e035      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8a:	4b10      	ldr	r3, [pc, #64]	; (8002ccc <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c90:	f7fe fedc 	bl	8001a4c <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c98:	f7fe fed8 	bl	8001a4c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e026      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1f0      	bne.n	8002c98 <HAL_RCC_OscConfig+0x498>
 8002cb6:	e01e      	b.n	8002cf6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d107      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e019      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_OscConfig+0x500>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d106      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000

08002d04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0d0      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b67      	ldr	r3, [pc, #412]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4965      	ldr	r1, [pc, #404]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b63      	ldr	r3, [pc, #396]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0b8      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d020      	beq.n	8002d96 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d60:	4b59      	ldr	r3, [pc, #356]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d6a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0308 	and.w	r3, r3, #8
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d78:	4b53      	ldr	r3, [pc, #332]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4a52      	ldr	r2, [pc, #328]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d82:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	494d      	ldr	r1, [pc, #308]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d040      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d115      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07f      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d107      	bne.n	8002dd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e073      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e06b      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002de2:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f023 0203 	bic.w	r2, r3, #3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4936      	ldr	r1, [pc, #216]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002df4:	f7fe fe2a 	bl	8001a4c <HAL_GetTick>
 8002df8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dfa:	e00a      	b.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfc:	f7fe fe26 	bl	8001a4c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e053      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f003 020c 	and.w	r2, r3, #12
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d1eb      	bne.n	8002dfc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e24:	4b27      	ldr	r3, [pc, #156]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d210      	bcs.n	8002e54 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e32:	4b24      	ldr	r3, [pc, #144]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0207 	bic.w	r2, r3, #7
 8002e3a:	4922      	ldr	r1, [pc, #136]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d001      	beq.n	8002e54 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e032      	b.n	8002eba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e60:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4916      	ldr	r1, [pc, #88]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d009      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	490e      	ldr	r1, [pc, #56]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e92:	f000 f821 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 8002e96:	4602      	mov	r2, r0
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	490a      	ldr	r1, [pc, #40]	; (8002ecc <HAL_RCC_ClockConfig+0x1c8>)
 8002ea4:	5ccb      	ldrb	r3, [r1, r3]
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	4a09      	ldr	r2, [pc, #36]	; (8002ed0 <HAL_RCC_ClockConfig+0x1cc>)
 8002eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fe fd88 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40022000 	.word	0x40022000
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	080044ac 	.word	0x080044ac
 8002ed0:	20000020 	.word	0x20000020
 8002ed4:	20000024 	.word	0x20000024

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ef2:	4b1e      	ldr	r3, [pc, #120]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d002      	beq.n	8002f08 <HAL_RCC_GetSysClockFreq+0x30>
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d003      	beq.n	8002f0e <HAL_RCC_GetSysClockFreq+0x36>
 8002f06:	e027      	b.n	8002f58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f08:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f0a:	613b      	str	r3, [r7, #16]
      break;
 8002f0c:	e027      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0c9b      	lsrs	r3, r3, #18
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f18:	5cd3      	ldrb	r3, [r2, r3]
 8002f1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d010      	beq.n	8002f48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f26:	4b11      	ldr	r3, [pc, #68]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x94>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	0c5b      	lsrs	r3, r3, #17
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f3a:	fb03 f202 	mul.w	r2, r3, r2
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	e004      	b.n	8002f52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0c      	ldr	r2, [pc, #48]	; (8002f7c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f4c:	fb02 f303 	mul.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	613b      	str	r3, [r7, #16]
      break;
 8002f56:	e002      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f5a:	613b      	str	r3, [r7, #16]
      break;
 8002f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5e:	693b      	ldr	r3, [r7, #16]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bc80      	pop	{r7}
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	007a1200 	.word	0x007a1200
 8002f74:	080044c4 	.word	0x080044c4
 8002f78:	080044d4 	.word	0x080044d4
 8002f7c:	003d0900 	.word	0x003d0900

08002f80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f86:	681b      	ldr	r3, [r3, #0]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	20000020 	.word	0x20000020

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f98:	f7ff fff2 	bl	8002f80 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	080044bc 	.word	0x080044bc

08002fbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <RCC_Delay+0x34>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <RCC_Delay+0x38>)
 8002fca:	fba2 2303 	umull	r2, r3, r2, r3
 8002fce:	0a5b      	lsrs	r3, r3, #9
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd8:	bf00      	nop
  }
  while (Delay --);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	60fa      	str	r2, [r7, #12]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1f9      	bne.n	8002fd8 <RCC_Delay+0x1c>
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	20000020 	.word	0x20000020
 8002ff4:	10624dd3 	.word	0x10624dd3

08002ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d07d      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003014:	2300      	movs	r3, #0
 8003016:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003018:	4b4f      	ldr	r3, [pc, #316]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10d      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003024:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	4a4b      	ldr	r2, [pc, #300]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800302a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800302e:	61d3      	str	r3, [r2, #28]
 8003030:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303c:	2301      	movs	r3, #1
 800303e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003040:	4b46      	ldr	r3, [pc, #280]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d118      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304c:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a42      	ldr	r2, [pc, #264]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003058:	f7fe fcf8 	bl	8001a4c <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	e008      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003060:	f7fe fcf4 	bl	8001a4c <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b64      	cmp	r3, #100	; 0x64
 800306c:	d901      	bls.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e06d      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	4b3a      	ldr	r3, [pc, #232]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800307e:	4b36      	ldr	r3, [pc, #216]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003086:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d02e      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	d027      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800309c:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030a6:	4b2e      	ldr	r3, [pc, #184]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030b2:	4a29      	ldr	r2, [pc, #164]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d014      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe fcc3 	bl	8001a4c <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe fcbf 	bl	8001a4c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e036      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e0:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0ee      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ec:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4917      	ldr	r1, [pc, #92]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	4a13      	ldr	r2, [pc, #76]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800310a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800310e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800311c:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	490b      	ldr	r1, [pc, #44]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d008      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800313a:	4b07      	ldr	r3, [pc, #28]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4904      	ldr	r1, [pc, #16]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003148:	4313      	orrs	r3, r2
 800314a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	40007000 	.word	0x40007000
 8003160:	42420440 	.word	0x42420440

08003164 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	2300      	movs	r3, #0
 800317e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b10      	cmp	r3, #16
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b10      	cmp	r3, #16
 800318a:	f200 808a 	bhi.w	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d045      	beq.n	8003220 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d075      	beq.n	8003286 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800319a:	e082      	b.n	80032a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80031a2:	4b45      	ldr	r3, [pc, #276]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d07b      	beq.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0c9b      	lsrs	r3, r3, #18
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a41      	ldr	r2, [pc, #260]	; (80032bc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d015      	beq.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031c6:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	0c5b      	lsrs	r3, r3, #17
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	4a3b      	ldr	r2, [pc, #236]	; (80032c0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00d      	beq.n	80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031e0:	4a38      	ldr	r2, [pc, #224]	; (80032c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	e004      	b.n	80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4a34      	ldr	r2, [pc, #208]	; (80032c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031fc:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003208:	d102      	bne.n	8003210 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	61bb      	str	r3, [r7, #24]
      break;
 800320e:	e04a      	b.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4a2d      	ldr	r2, [pc, #180]	; (80032cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	61bb      	str	r3, [r7, #24]
      break;
 800321e:	e042      	b.n	80032a6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003220:	4b25      	ldr	r3, [pc, #148]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003230:	d108      	bne.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800323c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e01f      	b.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800324e:	d109      	bne.n	8003264 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003250:	4b19      	ldr	r3, [pc, #100]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800325c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003260:	61bb      	str	r3, [r7, #24]
 8003262:	e00f      	b.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800326a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800326e:	d11c      	bne.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003270:	4b11      	ldr	r3, [pc, #68]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d016      	beq.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800327c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003280:	61bb      	str	r3, [r7, #24]
      break;
 8003282:	e012      	b.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003284:	e011      	b.n	80032aa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003286:	f7ff fe85 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 800328a:	4602      	mov	r2, r0
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	0b9b      	lsrs	r3, r3, #14
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	3301      	adds	r3, #1
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fbb2 f3f3 	udiv	r3, r2, r3
 800329e:	61bb      	str	r3, [r7, #24]
      break;
 80032a0:	e004      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80032a2:	bf00      	nop
 80032a4:	e002      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80032aa:	bf00      	nop
    }
  }
  return (frequency);
 80032ac:	69bb      	ldr	r3, [r7, #24]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	080044d8 	.word	0x080044d8
 80032c0:	080044e8 	.word	0x080044e8
 80032c4:	007a1200 	.word	0x007a1200
 80032c8:	003d0900 	.word	0x003d0900
 80032cc:	aaaaaaab 	.word	0xaaaaaaab

080032d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e041      	b.n	8003366 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f7fe f834 	bl	8001364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f000 f992 	bl	8003638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <HAL_TIM_PWM_Start+0x24>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b01      	cmp	r3, #1
 800338a:	bf14      	ite	ne
 800338c:	2301      	movne	r3, #1
 800338e:	2300      	moveq	r3, #0
 8003390:	b2db      	uxtb	r3, r3
 8003392:	e022      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	2b04      	cmp	r3, #4
 8003398:	d109      	bne.n	80033ae <HAL_TIM_PWM_Start+0x3e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	bf14      	ite	ne
 80033a6:	2301      	movne	r3, #1
 80033a8:	2300      	moveq	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	e015      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d109      	bne.n	80033c8 <HAL_TIM_PWM_Start+0x58>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	bf14      	ite	ne
 80033c0:	2301      	movne	r3, #1
 80033c2:	2300      	moveq	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	e008      	b.n	80033da <HAL_TIM_PWM_Start+0x6a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	bf14      	ite	ne
 80033d4:	2301      	movne	r3, #1
 80033d6:	2300      	moveq	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e05e      	b.n	80034a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d104      	bne.n	80033f2 <HAL_TIM_PWM_Start+0x82>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f0:	e013      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d104      	bne.n	8003402 <HAL_TIM_PWM_Start+0x92>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003400:	e00b      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b08      	cmp	r3, #8
 8003406:	d104      	bne.n	8003412 <HAL_TIM_PWM_Start+0xa2>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003410:	e003      	b.n	800341a <HAL_TIM_PWM_Start+0xaa>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2201      	movs	r2, #1
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f000 faf2 	bl	8003a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1e      	ldr	r2, [pc, #120]	; (80034a8 <HAL_TIM_PWM_Start+0x138>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d107      	bne.n	8003442 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <HAL_TIM_PWM_Start+0x138>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_TIM_PWM_Start+0xfa>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003454:	d009      	beq.n	800346a <HAL_TIM_PWM_Start+0xfa>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a14      	ldr	r2, [pc, #80]	; (80034ac <HAL_TIM_PWM_Start+0x13c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_TIM_PWM_Start+0xfa>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <HAL_TIM_PWM_Start+0x140>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d111      	bne.n	800348e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b06      	cmp	r3, #6
 800347a:	d010      	beq.n	800349e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800348c:	e007      	b.n	800349e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40012c00 	.word	0x40012c00
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800

080034b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ce:	2302      	movs	r3, #2
 80034d0:	e0ae      	b.n	8003630 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	f200 809f 	bhi.w	8003620 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034e2:	a201      	add	r2, pc, #4	; (adr r2, 80034e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e8:	0800351d 	.word	0x0800351d
 80034ec:	08003621 	.word	0x08003621
 80034f0:	08003621 	.word	0x08003621
 80034f4:	08003621 	.word	0x08003621
 80034f8:	0800355d 	.word	0x0800355d
 80034fc:	08003621 	.word	0x08003621
 8003500:	08003621 	.word	0x08003621
 8003504:	08003621 	.word	0x08003621
 8003508:	0800359f 	.word	0x0800359f
 800350c:	08003621 	.word	0x08003621
 8003510:	08003621 	.word	0x08003621
 8003514:	08003621 	.word	0x08003621
 8003518:	080035df 	.word	0x080035df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f8ea 	bl	80036fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0208 	orr.w	r2, r2, #8
 8003536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0204 	bic.w	r2, r2, #4
 8003546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6999      	ldr	r1, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	619a      	str	r2, [r3, #24]
      break;
 800355a:	e064      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f930 	bl	80037c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6999      	ldr	r1, [r3, #24]
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	021a      	lsls	r2, r3, #8
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	619a      	str	r2, [r3, #24]
      break;
 800359c:	e043      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68b9      	ldr	r1, [r7, #8]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f979 	bl	800389c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0208 	orr.w	r2, r2, #8
 80035b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	69da      	ldr	r2, [r3, #28]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0204 	bic.w	r2, r2, #4
 80035c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69d9      	ldr	r1, [r3, #28]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	61da      	str	r2, [r3, #28]
      break;
 80035dc:	e023      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68b9      	ldr	r1, [r7, #8]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f9c3 	bl	8003970 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	69da      	ldr	r2, [r3, #28]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69d9      	ldr	r1, [r3, #28]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	021a      	lsls	r2, r3, #8
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	61da      	str	r2, [r3, #28]
      break;
 800361e:	e002      	b.n	8003626 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	75fb      	strb	r3, [r7, #23]
      break;
 8003624:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800362e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3718      	adds	r7, #24
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <TIM_Base_SetConfig+0xb8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d00b      	beq.n	8003668 <TIM_Base_SetConfig+0x30>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003656:	d007      	beq.n	8003668 <TIM_Base_SetConfig+0x30>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <TIM_Base_SetConfig+0xbc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d003      	beq.n	8003668 <TIM_Base_SetConfig+0x30>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <TIM_Base_SetConfig+0xc0>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d108      	bne.n	800367a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <TIM_Base_SetConfig+0xb8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_Base_SetConfig+0x62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d007      	beq.n	800369a <TIM_Base_SetConfig+0x62>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <TIM_Base_SetConfig+0xbc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_Base_SetConfig+0x62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a18      	ldr	r2, [pc, #96]	; (80036f8 <TIM_Base_SetConfig+0xc0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d108      	bne.n	80036ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <TIM_Base_SetConfig+0xb8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d103      	bne.n	80036e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	615a      	str	r2, [r3, #20]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800

080036fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f023 0201 	bic.w	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	4313      	orrs	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 0302 	bic.w	r3, r3, #2
 8003744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a1c      	ldr	r2, [pc, #112]	; (80037c4 <TIM_OC1_SetConfig+0xc8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d10c      	bne.n	8003772 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f023 0308 	bic.w	r3, r3, #8
 800375e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f023 0304 	bic.w	r3, r3, #4
 8003770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a13      	ldr	r2, [pc, #76]	; (80037c4 <TIM_OC1_SetConfig+0xc8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d111      	bne.n	800379e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003780:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003788:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
}
 80037b8:	bf00      	nop
 80037ba:	371c      	adds	r7, #28
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00

080037c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	f023 0210 	bic.w	r2, r3, #16
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	021b      	lsls	r3, r3, #8
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4313      	orrs	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0320 	bic.w	r3, r3, #32
 8003812:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a1d      	ldr	r2, [pc, #116]	; (8003898 <TIM_OC2_SetConfig+0xd0>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d10d      	bne.n	8003844 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	4313      	orrs	r3, r2
 800383a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a14      	ldr	r2, [pc, #80]	; (8003898 <TIM_OC2_SetConfig+0xd0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d113      	bne.n	8003874 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003852:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr
 8003898:	40012c00 	.word	0x40012c00

0800389c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0303 	bic.w	r3, r3, #3
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	021b      	lsls	r3, r3, #8
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <TIM_OC3_SetConfig+0xd0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d10d      	bne.n	8003916 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003900:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	021b      	lsls	r3, r3, #8
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	4313      	orrs	r3, r2
 800390c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003914:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <TIM_OC3_SetConfig+0xd0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d113      	bne.n	8003946 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003924:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800392c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	621a      	str	r2, [r3, #32]
}
 8003960:	bf00      	nop
 8003962:	371c      	adds	r7, #28
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	40012c00 	.word	0x40012c00

08003970 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003970:	b480      	push	{r7}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	031b      	lsls	r3, r3, #12
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a0f      	ldr	r2, [pc, #60]	; (8003a08 <TIM_OC4_SetConfig+0x98>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d109      	bne.n	80039e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	019b      	lsls	r3, r3, #6
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	621a      	str	r2, [r3, #32]
}
 80039fe:	bf00      	nop
 8003a00:	371c      	adds	r7, #28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	40012c00 	.word	0x40012c00

08003a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e046      	b.n	8003afa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a16      	ldr	r2, [pc, #88]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d009      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a12      	ldr	r2, [pc, #72]	; (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10c      	bne.n	8003ae8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800

08003b10 <siprintf>:
 8003b10:	b40e      	push	{r1, r2, r3}
 8003b12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b16:	b500      	push	{lr}
 8003b18:	b09c      	sub	sp, #112	; 0x70
 8003b1a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b1c:	9002      	str	r0, [sp, #8]
 8003b1e:	9006      	str	r0, [sp, #24]
 8003b20:	9107      	str	r1, [sp, #28]
 8003b22:	9104      	str	r1, [sp, #16]
 8003b24:	4808      	ldr	r0, [pc, #32]	; (8003b48 <siprintf+0x38>)
 8003b26:	4909      	ldr	r1, [pc, #36]	; (8003b4c <siprintf+0x3c>)
 8003b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b2c:	9105      	str	r1, [sp, #20]
 8003b2e:	6800      	ldr	r0, [r0, #0]
 8003b30:	a902      	add	r1, sp, #8
 8003b32:	9301      	str	r3, [sp, #4]
 8003b34:	f000 f98e 	bl	8003e54 <_svfiprintf_r>
 8003b38:	2200      	movs	r2, #0
 8003b3a:	9b02      	ldr	r3, [sp, #8]
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	b01c      	add	sp, #112	; 0x70
 8003b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b44:	b003      	add	sp, #12
 8003b46:	4770      	bx	lr
 8003b48:	20000078 	.word	0x20000078
 8003b4c:	ffff0208 	.word	0xffff0208

08003b50 <memset>:
 8003b50:	4603      	mov	r3, r0
 8003b52:	4402      	add	r2, r0
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d100      	bne.n	8003b5a <memset+0xa>
 8003b58:	4770      	bx	lr
 8003b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5e:	e7f9      	b.n	8003b54 <memset+0x4>

08003b60 <__errno>:
 8003b60:	4b01      	ldr	r3, [pc, #4]	; (8003b68 <__errno+0x8>)
 8003b62:	6818      	ldr	r0, [r3, #0]
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000078 	.word	0x20000078

08003b6c <__libc_init_array>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	2600      	movs	r6, #0
 8003b70:	4d0c      	ldr	r5, [pc, #48]	; (8003ba4 <__libc_init_array+0x38>)
 8003b72:	4c0d      	ldr	r4, [pc, #52]	; (8003ba8 <__libc_init_array+0x3c>)
 8003b74:	1b64      	subs	r4, r4, r5
 8003b76:	10a4      	asrs	r4, r4, #2
 8003b78:	42a6      	cmp	r6, r4
 8003b7a:	d109      	bne.n	8003b90 <__libc_init_array+0x24>
 8003b7c:	f000 fc7a 	bl	8004474 <_init>
 8003b80:	2600      	movs	r6, #0
 8003b82:	4d0a      	ldr	r5, [pc, #40]	; (8003bac <__libc_init_array+0x40>)
 8003b84:	4c0a      	ldr	r4, [pc, #40]	; (8003bb0 <__libc_init_array+0x44>)
 8003b86:	1b64      	subs	r4, r4, r5
 8003b88:	10a4      	asrs	r4, r4, #2
 8003b8a:	42a6      	cmp	r6, r4
 8003b8c:	d105      	bne.n	8003b9a <__libc_init_array+0x2e>
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b94:	4798      	blx	r3
 8003b96:	3601      	adds	r6, #1
 8003b98:	e7ee      	b.n	8003b78 <__libc_init_array+0xc>
 8003b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b9e:	4798      	blx	r3
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	e7f2      	b.n	8003b8a <__libc_init_array+0x1e>
 8003ba4:	08004520 	.word	0x08004520
 8003ba8:	08004520 	.word	0x08004520
 8003bac:	08004520 	.word	0x08004520
 8003bb0:	08004524 	.word	0x08004524

08003bb4 <__retarget_lock_acquire_recursive>:
 8003bb4:	4770      	bx	lr

08003bb6 <__retarget_lock_release_recursive>:
 8003bb6:	4770      	bx	lr

08003bb8 <_free_r>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4605      	mov	r5, r0
 8003bbc:	2900      	cmp	r1, #0
 8003bbe:	d040      	beq.n	8003c42 <_free_r+0x8a>
 8003bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bc4:	1f0c      	subs	r4, r1, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	bfb8      	it	lt
 8003bca:	18e4      	addlt	r4, r4, r3
 8003bcc:	f000 f8dc 	bl	8003d88 <__malloc_lock>
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <_free_r+0x8c>)
 8003bd2:	6813      	ldr	r3, [r2, #0]
 8003bd4:	b933      	cbnz	r3, 8003be4 <_free_r+0x2c>
 8003bd6:	6063      	str	r3, [r4, #4]
 8003bd8:	6014      	str	r4, [r2, #0]
 8003bda:	4628      	mov	r0, r5
 8003bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003be0:	f000 b8d8 	b.w	8003d94 <__malloc_unlock>
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d908      	bls.n	8003bfa <_free_r+0x42>
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	1821      	adds	r1, r4, r0
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bf01      	itttt	eq
 8003bf0:	6819      	ldreq	r1, [r3, #0]
 8003bf2:	685b      	ldreq	r3, [r3, #4]
 8003bf4:	1809      	addeq	r1, r1, r0
 8003bf6:	6021      	streq	r1, [r4, #0]
 8003bf8:	e7ed      	b.n	8003bd6 <_free_r+0x1e>
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b10b      	cbz	r3, 8003c04 <_free_r+0x4c>
 8003c00:	42a3      	cmp	r3, r4
 8003c02:	d9fa      	bls.n	8003bfa <_free_r+0x42>
 8003c04:	6811      	ldr	r1, [r2, #0]
 8003c06:	1850      	adds	r0, r2, r1
 8003c08:	42a0      	cmp	r0, r4
 8003c0a:	d10b      	bne.n	8003c24 <_free_r+0x6c>
 8003c0c:	6820      	ldr	r0, [r4, #0]
 8003c0e:	4401      	add	r1, r0
 8003c10:	1850      	adds	r0, r2, r1
 8003c12:	4283      	cmp	r3, r0
 8003c14:	6011      	str	r1, [r2, #0]
 8003c16:	d1e0      	bne.n	8003bda <_free_r+0x22>
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4408      	add	r0, r1
 8003c1e:	6010      	str	r0, [r2, #0]
 8003c20:	6053      	str	r3, [r2, #4]
 8003c22:	e7da      	b.n	8003bda <_free_r+0x22>
 8003c24:	d902      	bls.n	8003c2c <_free_r+0x74>
 8003c26:	230c      	movs	r3, #12
 8003c28:	602b      	str	r3, [r5, #0]
 8003c2a:	e7d6      	b.n	8003bda <_free_r+0x22>
 8003c2c:	6820      	ldr	r0, [r4, #0]
 8003c2e:	1821      	adds	r1, r4, r0
 8003c30:	428b      	cmp	r3, r1
 8003c32:	bf01      	itttt	eq
 8003c34:	6819      	ldreq	r1, [r3, #0]
 8003c36:	685b      	ldreq	r3, [r3, #4]
 8003c38:	1809      	addeq	r1, r1, r0
 8003c3a:	6021      	streq	r1, [r4, #0]
 8003c3c:	6063      	str	r3, [r4, #4]
 8003c3e:	6054      	str	r4, [r2, #4]
 8003c40:	e7cb      	b.n	8003bda <_free_r+0x22>
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20000280 	.word	0x20000280

08003c48 <sbrk_aligned>:
 8003c48:	b570      	push	{r4, r5, r6, lr}
 8003c4a:	4e0e      	ldr	r6, [pc, #56]	; (8003c84 <sbrk_aligned+0x3c>)
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	6831      	ldr	r1, [r6, #0]
 8003c50:	4605      	mov	r5, r0
 8003c52:	b911      	cbnz	r1, 8003c5a <sbrk_aligned+0x12>
 8003c54:	f000 fbaa 	bl	80043ac <_sbrk_r>
 8003c58:	6030      	str	r0, [r6, #0]
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	f000 fba5 	bl	80043ac <_sbrk_r>
 8003c62:	1c43      	adds	r3, r0, #1
 8003c64:	d00a      	beq.n	8003c7c <sbrk_aligned+0x34>
 8003c66:	1cc4      	adds	r4, r0, #3
 8003c68:	f024 0403 	bic.w	r4, r4, #3
 8003c6c:	42a0      	cmp	r0, r4
 8003c6e:	d007      	beq.n	8003c80 <sbrk_aligned+0x38>
 8003c70:	1a21      	subs	r1, r4, r0
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 fb9a 	bl	80043ac <_sbrk_r>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d101      	bne.n	8003c80 <sbrk_aligned+0x38>
 8003c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8003c80:	4620      	mov	r0, r4
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	20000284 	.word	0x20000284

08003c88 <_malloc_r>:
 8003c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c8c:	1ccd      	adds	r5, r1, #3
 8003c8e:	f025 0503 	bic.w	r5, r5, #3
 8003c92:	3508      	adds	r5, #8
 8003c94:	2d0c      	cmp	r5, #12
 8003c96:	bf38      	it	cc
 8003c98:	250c      	movcc	r5, #12
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	db01      	blt.n	8003ca4 <_malloc_r+0x1c>
 8003ca0:	42a9      	cmp	r1, r5
 8003ca2:	d905      	bls.n	8003cb0 <_malloc_r+0x28>
 8003ca4:	230c      	movs	r3, #12
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4630      	mov	r0, r6
 8003cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cb0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d84 <_malloc_r+0xfc>
 8003cb4:	f000 f868 	bl	8003d88 <__malloc_lock>
 8003cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8003cbc:	461c      	mov	r4, r3
 8003cbe:	bb5c      	cbnz	r4, 8003d18 <_malloc_r+0x90>
 8003cc0:	4629      	mov	r1, r5
 8003cc2:	4638      	mov	r0, r7
 8003cc4:	f7ff ffc0 	bl	8003c48 <sbrk_aligned>
 8003cc8:	1c43      	adds	r3, r0, #1
 8003cca:	4604      	mov	r4, r0
 8003ccc:	d155      	bne.n	8003d7a <_malloc_r+0xf2>
 8003cce:	f8d8 4000 	ldr.w	r4, [r8]
 8003cd2:	4626      	mov	r6, r4
 8003cd4:	2e00      	cmp	r6, #0
 8003cd6:	d145      	bne.n	8003d64 <_malloc_r+0xdc>
 8003cd8:	2c00      	cmp	r4, #0
 8003cda:	d048      	beq.n	8003d6e <_malloc_r+0xe6>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	4631      	mov	r1, r6
 8003ce0:	4638      	mov	r0, r7
 8003ce2:	eb04 0903 	add.w	r9, r4, r3
 8003ce6:	f000 fb61 	bl	80043ac <_sbrk_r>
 8003cea:	4581      	cmp	r9, r0
 8003cec:	d13f      	bne.n	8003d6e <_malloc_r+0xe6>
 8003cee:	6821      	ldr	r1, [r4, #0]
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	1a6d      	subs	r5, r5, r1
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	f7ff ffa7 	bl	8003c48 <sbrk_aligned>
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d037      	beq.n	8003d6e <_malloc_r+0xe6>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	442b      	add	r3, r5
 8003d02:	6023      	str	r3, [r4, #0]
 8003d04:	f8d8 3000 	ldr.w	r3, [r8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d038      	beq.n	8003d7e <_malloc_r+0xf6>
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	42a2      	cmp	r2, r4
 8003d10:	d12b      	bne.n	8003d6a <_malloc_r+0xe2>
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	e00f      	b.n	8003d38 <_malloc_r+0xb0>
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	1b52      	subs	r2, r2, r5
 8003d1c:	d41f      	bmi.n	8003d5e <_malloc_r+0xd6>
 8003d1e:	2a0b      	cmp	r2, #11
 8003d20:	d917      	bls.n	8003d52 <_malloc_r+0xca>
 8003d22:	1961      	adds	r1, r4, r5
 8003d24:	42a3      	cmp	r3, r4
 8003d26:	6025      	str	r5, [r4, #0]
 8003d28:	bf18      	it	ne
 8003d2a:	6059      	strne	r1, [r3, #4]
 8003d2c:	6863      	ldr	r3, [r4, #4]
 8003d2e:	bf08      	it	eq
 8003d30:	f8c8 1000 	streq.w	r1, [r8]
 8003d34:	5162      	str	r2, [r4, r5]
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	4638      	mov	r0, r7
 8003d3a:	f104 060b 	add.w	r6, r4, #11
 8003d3e:	f000 f829 	bl	8003d94 <__malloc_unlock>
 8003d42:	f026 0607 	bic.w	r6, r6, #7
 8003d46:	1d23      	adds	r3, r4, #4
 8003d48:	1af2      	subs	r2, r6, r3
 8003d4a:	d0ae      	beq.n	8003caa <_malloc_r+0x22>
 8003d4c:	1b9b      	subs	r3, r3, r6
 8003d4e:	50a3      	str	r3, [r4, r2]
 8003d50:	e7ab      	b.n	8003caa <_malloc_r+0x22>
 8003d52:	42a3      	cmp	r3, r4
 8003d54:	6862      	ldr	r2, [r4, #4]
 8003d56:	d1dd      	bne.n	8003d14 <_malloc_r+0x8c>
 8003d58:	f8c8 2000 	str.w	r2, [r8]
 8003d5c:	e7ec      	b.n	8003d38 <_malloc_r+0xb0>
 8003d5e:	4623      	mov	r3, r4
 8003d60:	6864      	ldr	r4, [r4, #4]
 8003d62:	e7ac      	b.n	8003cbe <_malloc_r+0x36>
 8003d64:	4634      	mov	r4, r6
 8003d66:	6876      	ldr	r6, [r6, #4]
 8003d68:	e7b4      	b.n	8003cd4 <_malloc_r+0x4c>
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	e7cc      	b.n	8003d08 <_malloc_r+0x80>
 8003d6e:	230c      	movs	r3, #12
 8003d70:	4638      	mov	r0, r7
 8003d72:	603b      	str	r3, [r7, #0]
 8003d74:	f000 f80e 	bl	8003d94 <__malloc_unlock>
 8003d78:	e797      	b.n	8003caa <_malloc_r+0x22>
 8003d7a:	6025      	str	r5, [r4, #0]
 8003d7c:	e7dc      	b.n	8003d38 <_malloc_r+0xb0>
 8003d7e:	605b      	str	r3, [r3, #4]
 8003d80:	deff      	udf	#255	; 0xff
 8003d82:	bf00      	nop
 8003d84:	20000280 	.word	0x20000280

08003d88 <__malloc_lock>:
 8003d88:	4801      	ldr	r0, [pc, #4]	; (8003d90 <__malloc_lock+0x8>)
 8003d8a:	f7ff bf13 	b.w	8003bb4 <__retarget_lock_acquire_recursive>
 8003d8e:	bf00      	nop
 8003d90:	2000027c 	.word	0x2000027c

08003d94 <__malloc_unlock>:
 8003d94:	4801      	ldr	r0, [pc, #4]	; (8003d9c <__malloc_unlock+0x8>)
 8003d96:	f7ff bf0e 	b.w	8003bb6 <__retarget_lock_release_recursive>
 8003d9a:	bf00      	nop
 8003d9c:	2000027c 	.word	0x2000027c

08003da0 <__ssputs_r>:
 8003da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003da4:	461f      	mov	r7, r3
 8003da6:	688e      	ldr	r6, [r1, #8]
 8003da8:	4682      	mov	sl, r0
 8003daa:	42be      	cmp	r6, r7
 8003dac:	460c      	mov	r4, r1
 8003dae:	4690      	mov	r8, r2
 8003db0:	680b      	ldr	r3, [r1, #0]
 8003db2:	d82c      	bhi.n	8003e0e <__ssputs_r+0x6e>
 8003db4:	898a      	ldrh	r2, [r1, #12]
 8003db6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003dba:	d026      	beq.n	8003e0a <__ssputs_r+0x6a>
 8003dbc:	6965      	ldr	r5, [r4, #20]
 8003dbe:	6909      	ldr	r1, [r1, #16]
 8003dc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dc4:	eba3 0901 	sub.w	r9, r3, r1
 8003dc8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003dcc:	1c7b      	adds	r3, r7, #1
 8003dce:	444b      	add	r3, r9
 8003dd0:	106d      	asrs	r5, r5, #1
 8003dd2:	429d      	cmp	r5, r3
 8003dd4:	bf38      	it	cc
 8003dd6:	461d      	movcc	r5, r3
 8003dd8:	0553      	lsls	r3, r2, #21
 8003dda:	d527      	bpl.n	8003e2c <__ssputs_r+0x8c>
 8003ddc:	4629      	mov	r1, r5
 8003dde:	f7ff ff53 	bl	8003c88 <_malloc_r>
 8003de2:	4606      	mov	r6, r0
 8003de4:	b360      	cbz	r0, 8003e40 <__ssputs_r+0xa0>
 8003de6:	464a      	mov	r2, r9
 8003de8:	6921      	ldr	r1, [r4, #16]
 8003dea:	f000 fafd 	bl	80043e8 <memcpy>
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df8:	81a3      	strh	r3, [r4, #12]
 8003dfa:	6126      	str	r6, [r4, #16]
 8003dfc:	444e      	add	r6, r9
 8003dfe:	6026      	str	r6, [r4, #0]
 8003e00:	463e      	mov	r6, r7
 8003e02:	6165      	str	r5, [r4, #20]
 8003e04:	eba5 0509 	sub.w	r5, r5, r9
 8003e08:	60a5      	str	r5, [r4, #8]
 8003e0a:	42be      	cmp	r6, r7
 8003e0c:	d900      	bls.n	8003e10 <__ssputs_r+0x70>
 8003e0e:	463e      	mov	r6, r7
 8003e10:	4632      	mov	r2, r6
 8003e12:	4641      	mov	r1, r8
 8003e14:	6820      	ldr	r0, [r4, #0]
 8003e16:	f000 faaf 	bl	8004378 <memmove>
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	68a3      	ldr	r3, [r4, #8]
 8003e1e:	1b9b      	subs	r3, r3, r6
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	6823      	ldr	r3, [r4, #0]
 8003e24:	4433      	add	r3, r6
 8003e26:	6023      	str	r3, [r4, #0]
 8003e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2c:	462a      	mov	r2, r5
 8003e2e:	f000 fae9 	bl	8004404 <_realloc_r>
 8003e32:	4606      	mov	r6, r0
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d1e0      	bne.n	8003dfa <__ssputs_r+0x5a>
 8003e38:	4650      	mov	r0, sl
 8003e3a:	6921      	ldr	r1, [r4, #16]
 8003e3c:	f7ff febc 	bl	8003bb8 <_free_r>
 8003e40:	230c      	movs	r3, #12
 8003e42:	f8ca 3000 	str.w	r3, [sl]
 8003e46:	89a3      	ldrh	r3, [r4, #12]
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e50:	81a3      	strh	r3, [r4, #12]
 8003e52:	e7e9      	b.n	8003e28 <__ssputs_r+0x88>

08003e54 <_svfiprintf_r>:
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	4698      	mov	r8, r3
 8003e5a:	898b      	ldrh	r3, [r1, #12]
 8003e5c:	4607      	mov	r7, r0
 8003e5e:	061b      	lsls	r3, r3, #24
 8003e60:	460d      	mov	r5, r1
 8003e62:	4614      	mov	r4, r2
 8003e64:	b09d      	sub	sp, #116	; 0x74
 8003e66:	d50e      	bpl.n	8003e86 <_svfiprintf_r+0x32>
 8003e68:	690b      	ldr	r3, [r1, #16]
 8003e6a:	b963      	cbnz	r3, 8003e86 <_svfiprintf_r+0x32>
 8003e6c:	2140      	movs	r1, #64	; 0x40
 8003e6e:	f7ff ff0b 	bl	8003c88 <_malloc_r>
 8003e72:	6028      	str	r0, [r5, #0]
 8003e74:	6128      	str	r0, [r5, #16]
 8003e76:	b920      	cbnz	r0, 8003e82 <_svfiprintf_r+0x2e>
 8003e78:	230c      	movs	r3, #12
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e80:	e0d0      	b.n	8004024 <_svfiprintf_r+0x1d0>
 8003e82:	2340      	movs	r3, #64	; 0x40
 8003e84:	616b      	str	r3, [r5, #20]
 8003e86:	2300      	movs	r3, #0
 8003e88:	9309      	str	r3, [sp, #36]	; 0x24
 8003e8a:	2320      	movs	r3, #32
 8003e8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e90:	2330      	movs	r3, #48	; 0x30
 8003e92:	f04f 0901 	mov.w	r9, #1
 8003e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e9a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800403c <_svfiprintf_r+0x1e8>
 8003e9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ea2:	4623      	mov	r3, r4
 8003ea4:	469a      	mov	sl, r3
 8003ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003eaa:	b10a      	cbz	r2, 8003eb0 <_svfiprintf_r+0x5c>
 8003eac:	2a25      	cmp	r2, #37	; 0x25
 8003eae:	d1f9      	bne.n	8003ea4 <_svfiprintf_r+0x50>
 8003eb0:	ebba 0b04 	subs.w	fp, sl, r4
 8003eb4:	d00b      	beq.n	8003ece <_svfiprintf_r+0x7a>
 8003eb6:	465b      	mov	r3, fp
 8003eb8:	4622      	mov	r2, r4
 8003eba:	4629      	mov	r1, r5
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f7ff ff6f 	bl	8003da0 <__ssputs_r>
 8003ec2:	3001      	adds	r0, #1
 8003ec4:	f000 80a9 	beq.w	800401a <_svfiprintf_r+0x1c6>
 8003ec8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eca:	445a      	add	r2, fp
 8003ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8003ece:	f89a 3000 	ldrb.w	r3, [sl]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80a1 	beq.w	800401a <_svfiprintf_r+0x1c6>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f04f 32ff 	mov.w	r2, #4294967295
 8003ede:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ee2:	f10a 0a01 	add.w	sl, sl, #1
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	9307      	str	r3, [sp, #28]
 8003eea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003eee:	931a      	str	r3, [sp, #104]	; 0x68
 8003ef0:	4654      	mov	r4, sl
 8003ef2:	2205      	movs	r2, #5
 8003ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ef8:	4850      	ldr	r0, [pc, #320]	; (800403c <_svfiprintf_r+0x1e8>)
 8003efa:	f000 fa67 	bl	80043cc <memchr>
 8003efe:	9a04      	ldr	r2, [sp, #16]
 8003f00:	b9d8      	cbnz	r0, 8003f3a <_svfiprintf_r+0xe6>
 8003f02:	06d0      	lsls	r0, r2, #27
 8003f04:	bf44      	itt	mi
 8003f06:	2320      	movmi	r3, #32
 8003f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f0c:	0711      	lsls	r1, r2, #28
 8003f0e:	bf44      	itt	mi
 8003f10:	232b      	movmi	r3, #43	; 0x2b
 8003f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f16:	f89a 3000 	ldrb.w	r3, [sl]
 8003f1a:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1c:	d015      	beq.n	8003f4a <_svfiprintf_r+0xf6>
 8003f1e:	4654      	mov	r4, sl
 8003f20:	2000      	movs	r0, #0
 8003f22:	f04f 0c0a 	mov.w	ip, #10
 8003f26:	9a07      	ldr	r2, [sp, #28]
 8003f28:	4621      	mov	r1, r4
 8003f2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f2e:	3b30      	subs	r3, #48	; 0x30
 8003f30:	2b09      	cmp	r3, #9
 8003f32:	d94d      	bls.n	8003fd0 <_svfiprintf_r+0x17c>
 8003f34:	b1b0      	cbz	r0, 8003f64 <_svfiprintf_r+0x110>
 8003f36:	9207      	str	r2, [sp, #28]
 8003f38:	e014      	b.n	8003f64 <_svfiprintf_r+0x110>
 8003f3a:	eba0 0308 	sub.w	r3, r0, r8
 8003f3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003f42:	4313      	orrs	r3, r2
 8003f44:	46a2      	mov	sl, r4
 8003f46:	9304      	str	r3, [sp, #16]
 8003f48:	e7d2      	b.n	8003ef0 <_svfiprintf_r+0x9c>
 8003f4a:	9b03      	ldr	r3, [sp, #12]
 8003f4c:	1d19      	adds	r1, r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	9103      	str	r1, [sp, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bfbb      	ittet	lt
 8003f56:	425b      	neglt	r3, r3
 8003f58:	f042 0202 	orrlt.w	r2, r2, #2
 8003f5c:	9307      	strge	r3, [sp, #28]
 8003f5e:	9307      	strlt	r3, [sp, #28]
 8003f60:	bfb8      	it	lt
 8003f62:	9204      	strlt	r2, [sp, #16]
 8003f64:	7823      	ldrb	r3, [r4, #0]
 8003f66:	2b2e      	cmp	r3, #46	; 0x2e
 8003f68:	d10c      	bne.n	8003f84 <_svfiprintf_r+0x130>
 8003f6a:	7863      	ldrb	r3, [r4, #1]
 8003f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f6e:	d134      	bne.n	8003fda <_svfiprintf_r+0x186>
 8003f70:	9b03      	ldr	r3, [sp, #12]
 8003f72:	3402      	adds	r4, #2
 8003f74:	1d1a      	adds	r2, r3, #4
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	9203      	str	r2, [sp, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bfb8      	it	lt
 8003f7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f82:	9305      	str	r3, [sp, #20]
 8003f84:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004040 <_svfiprintf_r+0x1ec>
 8003f88:	2203      	movs	r2, #3
 8003f8a:	4650      	mov	r0, sl
 8003f8c:	7821      	ldrb	r1, [r4, #0]
 8003f8e:	f000 fa1d 	bl	80043cc <memchr>
 8003f92:	b138      	cbz	r0, 8003fa4 <_svfiprintf_r+0x150>
 8003f94:	2240      	movs	r2, #64	; 0x40
 8003f96:	9b04      	ldr	r3, [sp, #16]
 8003f98:	eba0 000a 	sub.w	r0, r0, sl
 8003f9c:	4082      	lsls	r2, r0
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	3401      	adds	r4, #1
 8003fa2:	9304      	str	r3, [sp, #16]
 8003fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fa8:	2206      	movs	r2, #6
 8003faa:	4826      	ldr	r0, [pc, #152]	; (8004044 <_svfiprintf_r+0x1f0>)
 8003fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fb0:	f000 fa0c 	bl	80043cc <memchr>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d038      	beq.n	800402a <_svfiprintf_r+0x1d6>
 8003fb8:	4b23      	ldr	r3, [pc, #140]	; (8004048 <_svfiprintf_r+0x1f4>)
 8003fba:	bb1b      	cbnz	r3, 8004004 <_svfiprintf_r+0x1b0>
 8003fbc:	9b03      	ldr	r3, [sp, #12]
 8003fbe:	3307      	adds	r3, #7
 8003fc0:	f023 0307 	bic.w	r3, r3, #7
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fca:	4433      	add	r3, r6
 8003fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fce:	e768      	b.n	8003ea2 <_svfiprintf_r+0x4e>
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fd8:	e7a6      	b.n	8003f28 <_svfiprintf_r+0xd4>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f04f 0c0a 	mov.w	ip, #10
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	3401      	adds	r4, #1
 8003fe4:	9305      	str	r3, [sp, #20]
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fec:	3a30      	subs	r2, #48	; 0x30
 8003fee:	2a09      	cmp	r2, #9
 8003ff0:	d903      	bls.n	8003ffa <_svfiprintf_r+0x1a6>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0c6      	beq.n	8003f84 <_svfiprintf_r+0x130>
 8003ff6:	9105      	str	r1, [sp, #20]
 8003ff8:	e7c4      	b.n	8003f84 <_svfiprintf_r+0x130>
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8004002:	e7f0      	b.n	8003fe6 <_svfiprintf_r+0x192>
 8004004:	ab03      	add	r3, sp, #12
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	462a      	mov	r2, r5
 800400a:	4638      	mov	r0, r7
 800400c:	4b0f      	ldr	r3, [pc, #60]	; (800404c <_svfiprintf_r+0x1f8>)
 800400e:	a904      	add	r1, sp, #16
 8004010:	f3af 8000 	nop.w
 8004014:	1c42      	adds	r2, r0, #1
 8004016:	4606      	mov	r6, r0
 8004018:	d1d6      	bne.n	8003fc8 <_svfiprintf_r+0x174>
 800401a:	89ab      	ldrh	r3, [r5, #12]
 800401c:	065b      	lsls	r3, r3, #25
 800401e:	f53f af2d 	bmi.w	8003e7c <_svfiprintf_r+0x28>
 8004022:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004024:	b01d      	add	sp, #116	; 0x74
 8004026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402a:	ab03      	add	r3, sp, #12
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	462a      	mov	r2, r5
 8004030:	4638      	mov	r0, r7
 8004032:	4b06      	ldr	r3, [pc, #24]	; (800404c <_svfiprintf_r+0x1f8>)
 8004034:	a904      	add	r1, sp, #16
 8004036:	f000 f87d 	bl	8004134 <_printf_i>
 800403a:	e7eb      	b.n	8004014 <_svfiprintf_r+0x1c0>
 800403c:	080044ea 	.word	0x080044ea
 8004040:	080044f0 	.word	0x080044f0
 8004044:	080044f4 	.word	0x080044f4
 8004048:	00000000 	.word	0x00000000
 800404c:	08003da1 	.word	0x08003da1

08004050 <_printf_common>:
 8004050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004054:	4616      	mov	r6, r2
 8004056:	4699      	mov	r9, r3
 8004058:	688a      	ldr	r2, [r1, #8]
 800405a:	690b      	ldr	r3, [r1, #16]
 800405c:	4607      	mov	r7, r0
 800405e:	4293      	cmp	r3, r2
 8004060:	bfb8      	it	lt
 8004062:	4613      	movlt	r3, r2
 8004064:	6033      	str	r3, [r6, #0]
 8004066:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800406a:	460c      	mov	r4, r1
 800406c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004070:	b10a      	cbz	r2, 8004076 <_printf_common+0x26>
 8004072:	3301      	adds	r3, #1
 8004074:	6033      	str	r3, [r6, #0]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	0699      	lsls	r1, r3, #26
 800407a:	bf42      	ittt	mi
 800407c:	6833      	ldrmi	r3, [r6, #0]
 800407e:	3302      	addmi	r3, #2
 8004080:	6033      	strmi	r3, [r6, #0]
 8004082:	6825      	ldr	r5, [r4, #0]
 8004084:	f015 0506 	ands.w	r5, r5, #6
 8004088:	d106      	bne.n	8004098 <_printf_common+0x48>
 800408a:	f104 0a19 	add.w	sl, r4, #25
 800408e:	68e3      	ldr	r3, [r4, #12]
 8004090:	6832      	ldr	r2, [r6, #0]
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	42ab      	cmp	r3, r5
 8004096:	dc2b      	bgt.n	80040f0 <_printf_common+0xa0>
 8004098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800409c:	1e13      	subs	r3, r2, #0
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	bf18      	it	ne
 80040a2:	2301      	movne	r3, #1
 80040a4:	0692      	lsls	r2, r2, #26
 80040a6:	d430      	bmi.n	800410a <_printf_common+0xba>
 80040a8:	4649      	mov	r1, r9
 80040aa:	4638      	mov	r0, r7
 80040ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040b0:	47c0      	blx	r8
 80040b2:	3001      	adds	r0, #1
 80040b4:	d023      	beq.n	80040fe <_printf_common+0xae>
 80040b6:	6823      	ldr	r3, [r4, #0]
 80040b8:	6922      	ldr	r2, [r4, #16]
 80040ba:	f003 0306 	and.w	r3, r3, #6
 80040be:	2b04      	cmp	r3, #4
 80040c0:	bf14      	ite	ne
 80040c2:	2500      	movne	r5, #0
 80040c4:	6833      	ldreq	r3, [r6, #0]
 80040c6:	f04f 0600 	mov.w	r6, #0
 80040ca:	bf08      	it	eq
 80040cc:	68e5      	ldreq	r5, [r4, #12]
 80040ce:	f104 041a 	add.w	r4, r4, #26
 80040d2:	bf08      	it	eq
 80040d4:	1aed      	subeq	r5, r5, r3
 80040d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80040da:	bf08      	it	eq
 80040dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e0:	4293      	cmp	r3, r2
 80040e2:	bfc4      	itt	gt
 80040e4:	1a9b      	subgt	r3, r3, r2
 80040e6:	18ed      	addgt	r5, r5, r3
 80040e8:	42b5      	cmp	r5, r6
 80040ea:	d11a      	bne.n	8004122 <_printf_common+0xd2>
 80040ec:	2000      	movs	r0, #0
 80040ee:	e008      	b.n	8004102 <_printf_common+0xb2>
 80040f0:	2301      	movs	r3, #1
 80040f2:	4652      	mov	r2, sl
 80040f4:	4649      	mov	r1, r9
 80040f6:	4638      	mov	r0, r7
 80040f8:	47c0      	blx	r8
 80040fa:	3001      	adds	r0, #1
 80040fc:	d103      	bne.n	8004106 <_printf_common+0xb6>
 80040fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004106:	3501      	adds	r5, #1
 8004108:	e7c1      	b.n	800408e <_printf_common+0x3e>
 800410a:	2030      	movs	r0, #48	; 0x30
 800410c:	18e1      	adds	r1, r4, r3
 800410e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004118:	4422      	add	r2, r4
 800411a:	3302      	adds	r3, #2
 800411c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004120:	e7c2      	b.n	80040a8 <_printf_common+0x58>
 8004122:	2301      	movs	r3, #1
 8004124:	4622      	mov	r2, r4
 8004126:	4649      	mov	r1, r9
 8004128:	4638      	mov	r0, r7
 800412a:	47c0      	blx	r8
 800412c:	3001      	adds	r0, #1
 800412e:	d0e6      	beq.n	80040fe <_printf_common+0xae>
 8004130:	3601      	adds	r6, #1
 8004132:	e7d9      	b.n	80040e8 <_printf_common+0x98>

08004134 <_printf_i>:
 8004134:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004138:	7e0f      	ldrb	r7, [r1, #24]
 800413a:	4691      	mov	r9, r2
 800413c:	2f78      	cmp	r7, #120	; 0x78
 800413e:	4680      	mov	r8, r0
 8004140:	460c      	mov	r4, r1
 8004142:	469a      	mov	sl, r3
 8004144:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004146:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800414a:	d807      	bhi.n	800415c <_printf_i+0x28>
 800414c:	2f62      	cmp	r7, #98	; 0x62
 800414e:	d80a      	bhi.n	8004166 <_printf_i+0x32>
 8004150:	2f00      	cmp	r7, #0
 8004152:	f000 80d5 	beq.w	8004300 <_printf_i+0x1cc>
 8004156:	2f58      	cmp	r7, #88	; 0x58
 8004158:	f000 80c1 	beq.w	80042de <_printf_i+0x1aa>
 800415c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004160:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004164:	e03a      	b.n	80041dc <_printf_i+0xa8>
 8004166:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800416a:	2b15      	cmp	r3, #21
 800416c:	d8f6      	bhi.n	800415c <_printf_i+0x28>
 800416e:	a101      	add	r1, pc, #4	; (adr r1, 8004174 <_printf_i+0x40>)
 8004170:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041e1 	.word	0x080041e1
 800417c:	0800415d 	.word	0x0800415d
 8004180:	0800415d 	.word	0x0800415d
 8004184:	0800415d 	.word	0x0800415d
 8004188:	0800415d 	.word	0x0800415d
 800418c:	080041e1 	.word	0x080041e1
 8004190:	0800415d 	.word	0x0800415d
 8004194:	0800415d 	.word	0x0800415d
 8004198:	0800415d 	.word	0x0800415d
 800419c:	0800415d 	.word	0x0800415d
 80041a0:	080042e7 	.word	0x080042e7
 80041a4:	0800420d 	.word	0x0800420d
 80041a8:	080042a1 	.word	0x080042a1
 80041ac:	0800415d 	.word	0x0800415d
 80041b0:	0800415d 	.word	0x0800415d
 80041b4:	08004309 	.word	0x08004309
 80041b8:	0800415d 	.word	0x0800415d
 80041bc:	0800420d 	.word	0x0800420d
 80041c0:	0800415d 	.word	0x0800415d
 80041c4:	0800415d 	.word	0x0800415d
 80041c8:	080042a9 	.word	0x080042a9
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	1d1a      	adds	r2, r3, #4
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	602a      	str	r2, [r5, #0]
 80041d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041dc:	2301      	movs	r3, #1
 80041de:	e0a0      	b.n	8004322 <_printf_i+0x1ee>
 80041e0:	6820      	ldr	r0, [r4, #0]
 80041e2:	682b      	ldr	r3, [r5, #0]
 80041e4:	0607      	lsls	r7, r0, #24
 80041e6:	f103 0104 	add.w	r1, r3, #4
 80041ea:	6029      	str	r1, [r5, #0]
 80041ec:	d501      	bpl.n	80041f2 <_printf_i+0xbe>
 80041ee:	681e      	ldr	r6, [r3, #0]
 80041f0:	e003      	b.n	80041fa <_printf_i+0xc6>
 80041f2:	0646      	lsls	r6, r0, #25
 80041f4:	d5fb      	bpl.n	80041ee <_printf_i+0xba>
 80041f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041fa:	2e00      	cmp	r6, #0
 80041fc:	da03      	bge.n	8004206 <_printf_i+0xd2>
 80041fe:	232d      	movs	r3, #45	; 0x2d
 8004200:	4276      	negs	r6, r6
 8004202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004206:	230a      	movs	r3, #10
 8004208:	4859      	ldr	r0, [pc, #356]	; (8004370 <_printf_i+0x23c>)
 800420a:	e012      	b.n	8004232 <_printf_i+0xfe>
 800420c:	682b      	ldr	r3, [r5, #0]
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	1d19      	adds	r1, r3, #4
 8004212:	6029      	str	r1, [r5, #0]
 8004214:	0605      	lsls	r5, r0, #24
 8004216:	d501      	bpl.n	800421c <_printf_i+0xe8>
 8004218:	681e      	ldr	r6, [r3, #0]
 800421a:	e002      	b.n	8004222 <_printf_i+0xee>
 800421c:	0641      	lsls	r1, r0, #25
 800421e:	d5fb      	bpl.n	8004218 <_printf_i+0xe4>
 8004220:	881e      	ldrh	r6, [r3, #0]
 8004222:	2f6f      	cmp	r7, #111	; 0x6f
 8004224:	bf0c      	ite	eq
 8004226:	2308      	moveq	r3, #8
 8004228:	230a      	movne	r3, #10
 800422a:	4851      	ldr	r0, [pc, #324]	; (8004370 <_printf_i+0x23c>)
 800422c:	2100      	movs	r1, #0
 800422e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004232:	6865      	ldr	r5, [r4, #4]
 8004234:	2d00      	cmp	r5, #0
 8004236:	bfa8      	it	ge
 8004238:	6821      	ldrge	r1, [r4, #0]
 800423a:	60a5      	str	r5, [r4, #8]
 800423c:	bfa4      	itt	ge
 800423e:	f021 0104 	bicge.w	r1, r1, #4
 8004242:	6021      	strge	r1, [r4, #0]
 8004244:	b90e      	cbnz	r6, 800424a <_printf_i+0x116>
 8004246:	2d00      	cmp	r5, #0
 8004248:	d04b      	beq.n	80042e2 <_printf_i+0x1ae>
 800424a:	4615      	mov	r5, r2
 800424c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004250:	fb03 6711 	mls	r7, r3, r1, r6
 8004254:	5dc7      	ldrb	r7, [r0, r7]
 8004256:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800425a:	4637      	mov	r7, r6
 800425c:	42bb      	cmp	r3, r7
 800425e:	460e      	mov	r6, r1
 8004260:	d9f4      	bls.n	800424c <_printf_i+0x118>
 8004262:	2b08      	cmp	r3, #8
 8004264:	d10b      	bne.n	800427e <_printf_i+0x14a>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	07de      	lsls	r6, r3, #31
 800426a:	d508      	bpl.n	800427e <_printf_i+0x14a>
 800426c:	6923      	ldr	r3, [r4, #16]
 800426e:	6861      	ldr	r1, [r4, #4]
 8004270:	4299      	cmp	r1, r3
 8004272:	bfde      	ittt	le
 8004274:	2330      	movle	r3, #48	; 0x30
 8004276:	f805 3c01 	strble.w	r3, [r5, #-1]
 800427a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800427e:	1b52      	subs	r2, r2, r5
 8004280:	6122      	str	r2, [r4, #16]
 8004282:	464b      	mov	r3, r9
 8004284:	4621      	mov	r1, r4
 8004286:	4640      	mov	r0, r8
 8004288:	f8cd a000 	str.w	sl, [sp]
 800428c:	aa03      	add	r2, sp, #12
 800428e:	f7ff fedf 	bl	8004050 <_printf_common>
 8004292:	3001      	adds	r0, #1
 8004294:	d14a      	bne.n	800432c <_printf_i+0x1f8>
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	b004      	add	sp, #16
 800429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a0:	6823      	ldr	r3, [r4, #0]
 80042a2:	f043 0320 	orr.w	r3, r3, #32
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	2778      	movs	r7, #120	; 0x78
 80042aa:	4832      	ldr	r0, [pc, #200]	; (8004374 <_printf_i+0x240>)
 80042ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	6829      	ldr	r1, [r5, #0]
 80042b4:	061f      	lsls	r7, r3, #24
 80042b6:	f851 6b04 	ldr.w	r6, [r1], #4
 80042ba:	d402      	bmi.n	80042c2 <_printf_i+0x18e>
 80042bc:	065f      	lsls	r7, r3, #25
 80042be:	bf48      	it	mi
 80042c0:	b2b6      	uxthmi	r6, r6
 80042c2:	07df      	lsls	r7, r3, #31
 80042c4:	bf48      	it	mi
 80042c6:	f043 0320 	orrmi.w	r3, r3, #32
 80042ca:	6029      	str	r1, [r5, #0]
 80042cc:	bf48      	it	mi
 80042ce:	6023      	strmi	r3, [r4, #0]
 80042d0:	b91e      	cbnz	r6, 80042da <_printf_i+0x1a6>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	f023 0320 	bic.w	r3, r3, #32
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	2310      	movs	r3, #16
 80042dc:	e7a6      	b.n	800422c <_printf_i+0xf8>
 80042de:	4824      	ldr	r0, [pc, #144]	; (8004370 <_printf_i+0x23c>)
 80042e0:	e7e4      	b.n	80042ac <_printf_i+0x178>
 80042e2:	4615      	mov	r5, r2
 80042e4:	e7bd      	b.n	8004262 <_printf_i+0x12e>
 80042e6:	682b      	ldr	r3, [r5, #0]
 80042e8:	6826      	ldr	r6, [r4, #0]
 80042ea:	1d18      	adds	r0, r3, #4
 80042ec:	6961      	ldr	r1, [r4, #20]
 80042ee:	6028      	str	r0, [r5, #0]
 80042f0:	0635      	lsls	r5, r6, #24
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	d501      	bpl.n	80042fa <_printf_i+0x1c6>
 80042f6:	6019      	str	r1, [r3, #0]
 80042f8:	e002      	b.n	8004300 <_printf_i+0x1cc>
 80042fa:	0670      	lsls	r0, r6, #25
 80042fc:	d5fb      	bpl.n	80042f6 <_printf_i+0x1c2>
 80042fe:	8019      	strh	r1, [r3, #0]
 8004300:	2300      	movs	r3, #0
 8004302:	4615      	mov	r5, r2
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	e7bc      	b.n	8004282 <_printf_i+0x14e>
 8004308:	682b      	ldr	r3, [r5, #0]
 800430a:	2100      	movs	r1, #0
 800430c:	1d1a      	adds	r2, r3, #4
 800430e:	602a      	str	r2, [r5, #0]
 8004310:	681d      	ldr	r5, [r3, #0]
 8004312:	6862      	ldr	r2, [r4, #4]
 8004314:	4628      	mov	r0, r5
 8004316:	f000 f859 	bl	80043cc <memchr>
 800431a:	b108      	cbz	r0, 8004320 <_printf_i+0x1ec>
 800431c:	1b40      	subs	r0, r0, r5
 800431e:	6060      	str	r0, [r4, #4]
 8004320:	6863      	ldr	r3, [r4, #4]
 8004322:	6123      	str	r3, [r4, #16]
 8004324:	2300      	movs	r3, #0
 8004326:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800432a:	e7aa      	b.n	8004282 <_printf_i+0x14e>
 800432c:	462a      	mov	r2, r5
 800432e:	4649      	mov	r1, r9
 8004330:	4640      	mov	r0, r8
 8004332:	6923      	ldr	r3, [r4, #16]
 8004334:	47d0      	blx	sl
 8004336:	3001      	adds	r0, #1
 8004338:	d0ad      	beq.n	8004296 <_printf_i+0x162>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	079b      	lsls	r3, r3, #30
 800433e:	d413      	bmi.n	8004368 <_printf_i+0x234>
 8004340:	68e0      	ldr	r0, [r4, #12]
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	4298      	cmp	r0, r3
 8004346:	bfb8      	it	lt
 8004348:	4618      	movlt	r0, r3
 800434a:	e7a6      	b.n	800429a <_printf_i+0x166>
 800434c:	2301      	movs	r3, #1
 800434e:	4632      	mov	r2, r6
 8004350:	4649      	mov	r1, r9
 8004352:	4640      	mov	r0, r8
 8004354:	47d0      	blx	sl
 8004356:	3001      	adds	r0, #1
 8004358:	d09d      	beq.n	8004296 <_printf_i+0x162>
 800435a:	3501      	adds	r5, #1
 800435c:	68e3      	ldr	r3, [r4, #12]
 800435e:	9903      	ldr	r1, [sp, #12]
 8004360:	1a5b      	subs	r3, r3, r1
 8004362:	42ab      	cmp	r3, r5
 8004364:	dcf2      	bgt.n	800434c <_printf_i+0x218>
 8004366:	e7eb      	b.n	8004340 <_printf_i+0x20c>
 8004368:	2500      	movs	r5, #0
 800436a:	f104 0619 	add.w	r6, r4, #25
 800436e:	e7f5      	b.n	800435c <_printf_i+0x228>
 8004370:	080044fb 	.word	0x080044fb
 8004374:	0800450c 	.word	0x0800450c

08004378 <memmove>:
 8004378:	4288      	cmp	r0, r1
 800437a:	b510      	push	{r4, lr}
 800437c:	eb01 0402 	add.w	r4, r1, r2
 8004380:	d902      	bls.n	8004388 <memmove+0x10>
 8004382:	4284      	cmp	r4, r0
 8004384:	4623      	mov	r3, r4
 8004386:	d807      	bhi.n	8004398 <memmove+0x20>
 8004388:	1e43      	subs	r3, r0, #1
 800438a:	42a1      	cmp	r1, r4
 800438c:	d008      	beq.n	80043a0 <memmove+0x28>
 800438e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004392:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004396:	e7f8      	b.n	800438a <memmove+0x12>
 8004398:	4601      	mov	r1, r0
 800439a:	4402      	add	r2, r0
 800439c:	428a      	cmp	r2, r1
 800439e:	d100      	bne.n	80043a2 <memmove+0x2a>
 80043a0:	bd10      	pop	{r4, pc}
 80043a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043aa:	e7f7      	b.n	800439c <memmove+0x24>

080043ac <_sbrk_r>:
 80043ac:	b538      	push	{r3, r4, r5, lr}
 80043ae:	2300      	movs	r3, #0
 80043b0:	4d05      	ldr	r5, [pc, #20]	; (80043c8 <_sbrk_r+0x1c>)
 80043b2:	4604      	mov	r4, r0
 80043b4:	4608      	mov	r0, r1
 80043b6:	602b      	str	r3, [r5, #0]
 80043b8:	f7fd f84c 	bl	8001454 <_sbrk>
 80043bc:	1c43      	adds	r3, r0, #1
 80043be:	d102      	bne.n	80043c6 <_sbrk_r+0x1a>
 80043c0:	682b      	ldr	r3, [r5, #0]
 80043c2:	b103      	cbz	r3, 80043c6 <_sbrk_r+0x1a>
 80043c4:	6023      	str	r3, [r4, #0]
 80043c6:	bd38      	pop	{r3, r4, r5, pc}
 80043c8:	20000278 	.word	0x20000278

080043cc <memchr>:
 80043cc:	4603      	mov	r3, r0
 80043ce:	b510      	push	{r4, lr}
 80043d0:	b2c9      	uxtb	r1, r1
 80043d2:	4402      	add	r2, r0
 80043d4:	4293      	cmp	r3, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	d101      	bne.n	80043de <memchr+0x12>
 80043da:	2000      	movs	r0, #0
 80043dc:	e003      	b.n	80043e6 <memchr+0x1a>
 80043de:	7804      	ldrb	r4, [r0, #0]
 80043e0:	3301      	adds	r3, #1
 80043e2:	428c      	cmp	r4, r1
 80043e4:	d1f6      	bne.n	80043d4 <memchr+0x8>
 80043e6:	bd10      	pop	{r4, pc}

080043e8 <memcpy>:
 80043e8:	440a      	add	r2, r1
 80043ea:	4291      	cmp	r1, r2
 80043ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80043f0:	d100      	bne.n	80043f4 <memcpy+0xc>
 80043f2:	4770      	bx	lr
 80043f4:	b510      	push	{r4, lr}
 80043f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043fa:	4291      	cmp	r1, r2
 80043fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004400:	d1f9      	bne.n	80043f6 <memcpy+0xe>
 8004402:	bd10      	pop	{r4, pc}

08004404 <_realloc_r>:
 8004404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	4680      	mov	r8, r0
 800440a:	4614      	mov	r4, r2
 800440c:	460e      	mov	r6, r1
 800440e:	b921      	cbnz	r1, 800441a <_realloc_r+0x16>
 8004410:	4611      	mov	r1, r2
 8004412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004416:	f7ff bc37 	b.w	8003c88 <_malloc_r>
 800441a:	b92a      	cbnz	r2, 8004428 <_realloc_r+0x24>
 800441c:	f7ff fbcc 	bl	8003bb8 <_free_r>
 8004420:	4625      	mov	r5, r4
 8004422:	4628      	mov	r0, r5
 8004424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004428:	f000 f81b 	bl	8004462 <_malloc_usable_size_r>
 800442c:	4284      	cmp	r4, r0
 800442e:	4607      	mov	r7, r0
 8004430:	d802      	bhi.n	8004438 <_realloc_r+0x34>
 8004432:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004436:	d812      	bhi.n	800445e <_realloc_r+0x5a>
 8004438:	4621      	mov	r1, r4
 800443a:	4640      	mov	r0, r8
 800443c:	f7ff fc24 	bl	8003c88 <_malloc_r>
 8004440:	4605      	mov	r5, r0
 8004442:	2800      	cmp	r0, #0
 8004444:	d0ed      	beq.n	8004422 <_realloc_r+0x1e>
 8004446:	42bc      	cmp	r4, r7
 8004448:	4622      	mov	r2, r4
 800444a:	4631      	mov	r1, r6
 800444c:	bf28      	it	cs
 800444e:	463a      	movcs	r2, r7
 8004450:	f7ff ffca 	bl	80043e8 <memcpy>
 8004454:	4631      	mov	r1, r6
 8004456:	4640      	mov	r0, r8
 8004458:	f7ff fbae 	bl	8003bb8 <_free_r>
 800445c:	e7e1      	b.n	8004422 <_realloc_r+0x1e>
 800445e:	4635      	mov	r5, r6
 8004460:	e7df      	b.n	8004422 <_realloc_r+0x1e>

08004462 <_malloc_usable_size_r>:
 8004462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004466:	1f18      	subs	r0, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	bfbc      	itt	lt
 800446c:	580b      	ldrlt	r3, [r1, r0]
 800446e:	18c0      	addlt	r0, r0, r3
 8004470:	4770      	bx	lr
	...

08004474 <_init>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr

08004480 <_fini>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr
